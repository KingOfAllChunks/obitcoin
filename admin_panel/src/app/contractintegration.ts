import { Member } from './member';
import { Pool } from './pool';

declare var web3: any;

export class contractintegration{
	accounts: any[];
	account: any;
	contractAbi: any;
	contractCompiled: any;
	contractGas: any;
	connected: any;
	initialized: any;
	lastBlockNumber: any;
	self: any;

	Obitcoin: any;

	constructor(){
		this.accounts = [];
		this.account = "";

		this.contractAbi = [{"constant":true,"inputs":[{"name":"pool","type":"uint16"}],"name":"getMembersBalance","outputs":[{"name":"","type":"uint128[]"},{"name":"","type":"uint128[]"},{"name":"","type":"uint16[]"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"pool","type":"uint16"}],"name":"getPoolData","outputs":[{"name":"","type":"bytes16[3]"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"pools","type":"uint16[]"},{"name":"members","type":"uint16[]"},{"name":"amount","type":"uint128[]"}],"name":"sendTokensBulk","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"getContractAddress","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"member","type":"uint16"}],"name":"getMemberDetails","outputs":[{"name":"","type":"bytes32"},{"name":"","type":"address"},{"name":"","type":"uint8"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"getPublishingBlockNumber","outputs":[{"name":"","type":"uint32"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"member","type":"uint16"},{"name":"name","type":"bytes32"},{"name":"adr","type":"address"},{"name":"isAdmin","type":"bool"}],"name":"updateMember","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"id","type":"uint16"},{"name":"admin","type":"bool"}],"name":"setAdmin","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"getPools","outputs":[{"name":"","type":"uint16[]"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"pool","type":"uint16"}],"name":"getPoolParticipants","outputs":[{"name":"","type":"uint16[]"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"getPoolCount","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"pool","type":"uint16"},{"name":"member","type":"uint16"},{"name":"amount","type":"uint128"}],"name":"sendTokens","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"getMembers","outputs":[{"name":"","type":"uint16[]"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"name","type":"bytes16"},{"name":"legalContract","type":"bytes16"},{"name":"financialReports","type":"bytes16"}],"name":"createDebtPool","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"pool","type":"uint16"},{"name":"member","type":"uint16"}],"name":"getMemberBalance","outputs":[{"name":"","type":"uint128[2]"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"pool","type":"uint16"},{"name":"name","type":"bytes16"},{"name":"legalContract","type":"bytes16"},{"name":"financialReports","type":"bytes16"}],"name":"updateDebtPool","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"name","type":"bytes32"},{"name":"adr","type":"address"},{"name":"isAdmin","type":"bool"}],"name":"addMember","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"pool","type":"uint16"},{"name":"amount","type":"uint128"}],"name":"buyTokens","outputs":[],"payable":false,"type":"function"},{"inputs":[],"payable":false,"type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"uint16"},{"indexed":true,"name":"to","type":"uint16"},{"indexed":true,"name":"pool","type":"uint16"},{"indexed":false,"name":"amount","type":"int256"},{"indexed":false,"name":"time","type":"uint256"}],"name":"TokenTransfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"uint16"},{"indexed":true,"name":"to","type":"uint16"},{"indexed":true,"name":"pool","type":"uint16"},{"indexed":false,"name":"amount","type":"uint128"},{"indexed":false,"name":"time","type":"uint256"}],"name":"SliceTransfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"uint16"},{"indexed":true,"name":"pool","type":"uint16"},{"indexed":false,"name":"amount","type":"uint128"},{"indexed":false,"name":"time","type":"uint256"}],"name":"TokenPurchase","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"uint16"},{"indexed":true,"name":"pool","type":"uint16"},{"indexed":false,"name":"added","type":"bool"},{"indexed":false,"name":"time","type":"uint256"}],"name":"PoolChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"uint16"},{"indexed":true,"name":"fromAddress","type":"address"},{"indexed":false,"name":"time","type":"uint256"}],"name":"UnauthorizedAccess","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"uint16"},{"indexed":true,"name":"to","type":"uint16"},{"indexed":false,"name":"added","type":"bool"},{"indexed":false,"name":"time","type":"uint256"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"uint16"},{"indexed":true,"name":"to","type":"uint16"},{"indexed":false,"name":"added","type":"bool"},{"indexed":false,"name":"time","type":"uint256"}],"name":"PersonChanged","type":"event"}];

		this.contractCompiled = '';

		this.contractGas = '4700000';

		this.connected = false;
		this.initialized = false;
		this.lastBlockNumber = 0;

		this.self = this;
	}

	isWeb3Available(){
		if(typeof web3 == "undefined") return false;
		return true;
	}

	init(callback){
		var self = this;

		web3.eth.getAccounts(function(err, accs) {
			if (err != null) {
				callback("There was an error fetching your accounts.");
				return;
			}

			if (accs.length == 0) {
				callback("Couldn't get any accounts! Make sure Metamask is configured correctly.");
				return;
			}
		
			self.accounts = accs;
			self.account = self.accounts[0];

			console.log("Extracted accounts: ",self.accounts);
			
			callback();
		});
	}

	deployNewContract(callback) {
		var self = this;

		var obitcoinContract = web3.eth.contract(this.contractAbi);
		this.Obitcoin = obitcoinContract.new(
		{
			from: web3.eth.accounts[0], 
			data: this.contractCompiled, 
			gas: this.contractGas
		}, function (e, contract){
			if (typeof contract.address !== 'undefined') {
				console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);
				console.log(contract);

				self.connected = true;

				callback(e, contract.address);
			}
			if(e) callback(e, contract.address);
		});
	}

	connectToContract(address, callback) {

		var obitcoinContract = web3.eth.contract(this.contractAbi);
		
		this.Obitcoin = obitcoinContract.at(address);
		
		var self = this;

		try {
			this.Obitcoin.getContractAddress.call({from: this.account}, function(error, result){
				if(!error){
					if(result==address){
						console.log("Connection successful");
						self.connected = true;
						callback();
					} else {
						callback("Invalid address!");
					}
				}
				else{
					console.error(error);
					callback("There was an error. Reload the page and try again");
				}
			});
		} catch (err){
			callback(err.message);
		}
	}

	isConnected(){
		return this.connected;
	}

	getAccount(){
		return this.account;
	}

	getPools(callback){
		this.Obitcoin.getPools.call({from: this.account}, function(error, result){
			if(!error){
				var data = [];
				result.forEach(res => data.push(res.valueOf()));
				callback(data);
			}
			else
				console.error(error);
		});
	}

	getPoolData(pool, callback){
		var self = this;
		this.Obitcoin.getPoolData.call(pool, {from: this.account}, function(error, result){
			if(!error){
				var data = [];
				result.forEach(item => data.push(self.hex2a(item)));
				callback(data);
			}
			else
				console.error(error);
		});
	}

	getPoolParticipants(pool, callback) {
		this.Obitcoin.getPoolParticipants.call(pool, {from: this.account}, function(error, result){
			if(!error){
				var data = [];
				result.forEach(res => data.push(res.valueOf()));
				callback(data);
			}
			else
				console.error(error);
		});
	}

	getMembers(callback){
		this.Obitcoin.getMembers.call({from: this.account}, function(error, result){
			if(!error){
				var data = [];
				result.forEach(res => data.push(res.valueOf()));
				callback(data);
			}
			else
				console.error(error);
		});
	}

	getMemberBalance(pool, member, callback){
		this.Obitcoin.getMemberBalance.call(pool, member, {from: this.account}, function(error, result){
			if(!error){
				var data = [];
				result.forEach(res => data.push(res.valueOf()));
				callback(data, member);
			}
			else
				console.error(error);
		});
	}

	getMembersBalance(pool: Number, callback: Function){
		this.Obitcoin.getMembersBalance.call(pool, {from: this.account}, function(error, result){
			if(!error){
				var members = [];
				var tokens = [];
				var slices = [];
				if(result[0].length != result[1].length || result[1].length != result[2].length) console.log("Received corrupt data on getMembersBalance("+pool+")");

				for(var i = 0; i<result[0].length; i++){
					tokens[i] = Number(result[0][i].valueOf());
					slices[i] = Number(result[1][i].valueOf());
					members[i] = Number(result[2][i].valueOf());
				}

				callback(members, tokens, slices);
			} else console.log(error);
		});
	}

	getMemberDetails(member: Number, callback: Function){
		var self = this;

		this.Obitcoin.getMemberDetails.call(member, {from: this.account}, function(error, result){
			if(!error){
				var data = new Array(3);
				data[0] = self.hex2a(result[0]);
				data[1] = result[1];
				data[2] = result[2].valueOf();

				callback(data);
			}
			else
				console.error(error);
		});
	}

	getWholeMembers(callback: Function){
		var members = [];
		var self = this;
		this.getMembers(function(data){
			if(data.length==0) callback(members);
			for(var i = 0; i<data.length; i++){
				self.getWholeMember(data[i], function(member: Member){
					members.push(member);

					if(members.length == data.length){
						console.log("Loaded members: ",members);
						callback(members);
					}
				});

			}
		});
	}

	getWholeMember(id: Number, callback: Function){
		var member = new Member();
		member.id = Number(id);

		this.getMemberDetails(id, function(result){
			member.name = result[0];
			member.address = result[1];
			member.permissionLevel = result[2];

			callback(member);
		});
	}

	getWholePools(callback: Function){
		var pools = [];
		var self = this;
		this.getPools(function(data: Number[]){
			if(data.length==0) callback(pools);

			for(var i = 0; i<data.length; i++){
				self.getWholePool(data[i], function(pool: Pool){
					pools.push(pool);

					if(pools.length == data.length){
						console.log("Loaded pools: ", pools);
						callback(pools);
					}
				});

			}
		});
	}

	getWholePool(id: Number, callback: Function){
		var self = this;

		var pool = new Pool();
		pool.id = Number(id);
		var stage1=false, stage2=false;

		pool.tokens = new Map<number, number>();
		pool.slices = new Map<number, number>();

		this.getPoolData(id, function(result: string[]){
			pool.name = result[0];
			pool.legalContract = result[1];
			pool.financialReports = result[2];

			stage1=true;

			if(stage1 && stage2) callback(pool);
		});

		this.getMembersBalance(id, function(members: number[], tokens: number[], slices: number){
			pool.members = members;

			for(var i = 0; i<members.length; i++){
				pool.tokens[members[i]] = tokens[i];
				pool.slices[members[i]] = slices[i];
			}

			stage2 = true;

			if(stage2 && stage1) callback(pool);
		});
	}

	addMember(name, address, isAdmin, callback){
		this.Obitcoin.addMember(name, address, isAdmin, {from: this.account}, function(error, result){
			if(!error){
				callback(result);
			}
			else
				console.error(error);
		});
	}

	setAdmin(member, admin) {
		this.Obitcoin.setAdmin(member, admin, {from: this.account}, function(error, result){
			if(!error)
				console.log(result);
			else
				console.error(error);
		});
	}

	createDebtPool(name, legalContract, financialReports, callback) {
		this.Obitcoin.createDebtPool(name, legalContract, financialReports, {from: this.account}, function(error, result){
			if(!error)
				callback(result);
			else
				console.error(error);
		});
	}

	updateMember(member, name, address, isAdmin, callback){

		this.Obitcoin.updateMember(member, name, address, isAdmin, {from: this.account}, function(error, result){
			if(!error){
				console.log(result);
				callback(result);
			}
			else
				console.error(error);
		});
	}

	updatePool(pool, name, legalContract, financialReports, callback){
		this.Obitcoin.updateDebtPool(pool, name, legalContract, financialReports, {from: this.account}, function(error, result){
			if(!error){
				console.log(result);
				callback(result);
			}
			else
				console.error(error);
		});
	}

	sendTokens(pools, member, amount, callback){
		this.Obitcoin.sendTokens(pools, member, amount, {from: this.account}, function(error, result){
			if(!error)
				callback(result)
			else
				console.error(error);
		});
	}

	sendTokensBulk(pool, members, amount, callback){
		this.Obitcoin.sendTokensBulk(pool, members, amount, {from: this.account}, function(error, result){
			if(!error)
				callback(result)
			else
				console.error(error);
		});
	}

	buyTokens(pool, amount, callback){
		this.Obitcoin.buyTokens(pool, amount, {from: this.account}, function(error, result){
			if(!error)
				callback(result)
			else
				console.error(error);
		});
	}

	getLastBlockNumber(){
		return this.lastBlockNumber;
	}

	startListeningForEvents(callback){
		var self = this;

		this.lastBlockNumber = web3.eth.getBlockNumber(function(err, result){
			if(err) return;
			self.lastBlockNumber = result;

			self.Obitcoin.getPublishingBlockNumber.call({from: self.account}, function(error, result){

				var events = self.Obitcoin.allEvents({fromBlock: result.valueOf(), toBlock: 'latest'});
				events.watch(function(err, event) {
					if (err) {
						console.log(err)
						return;
					}

					callback(event);
				});

			});
		});

		/*var coinsTransferEvent = this.Obitcoin.CoinsTransfer({}, {fromBlock: 0});
		coinsTransferEvent.watch(function(err, result) {
			if (err) {
				console.log(err)
				return;
			}
			console.log("["+result.args.time.valueOf()+"] sent "+result.args.amount.valueOf()+" from "+result.args.from+" to "+result.args.to);
		});
		
		var coinsPurchaseEvent = this.Obitcoin.CoinsPurchase({}, {fromBlock: 0});
		coinsPurchaseEvent.watch(function(err, result) {
			if (err) {
				console.log(err)
				return;
			}
			console.log("["+result.args.time.valueOf()+"] bought "+result.args.amount.valueOf()+" from "+result.args.from+" to "+result.args.poolIndex+" debt pool");
		});
		
		var poolCreatedEvent = this.Obitcoin.PoolCreated({}, {fromBlock: 0});
		poolCreatedEvent.watch(function(err,result) {
			if(err) {
				console.log(err);
				return;
			}
			console.log("["+result.args.time.valueOf()+"] created pool with index "+result.args.index.valueOf());
		});
		
		var unauthorizedAccessEvent = this.Obitcoin.UnauthorizedAccess({}, {fromBlock: 0});
		unauthorizedAccessEvent.watch(function(err,result) {
			if(err) {
				console.log(err);
				return;
			}
			console.log("["+result.args.time.valueOf()+"] Warning! Unauthorized access from "+result.args.from);
		});
		
		var adminChangedEvent = this.Obitcoin.AdminChanged({}, {fromBlock: 0});
		adminChangedEvent.watch(function(err,result) {
			if(err) {
				console.log(err);
				return;
			}
			console.log("["+result.args.time.valueOf()+"]" + (result.args.added ? "Added" : "Removed") + " admin with address "+result.args.person);
		});*/
		
		
	}

	hex2a(hexx) {
		var hex = hexx.toString();//force conversion
		var str = '';
		var int;
		for (var i = 2; i < hex.length; i += 2){
			int = parseInt(hex.substr(i, 2), 16);
			if(int==0) continue;
			str += String.fromCharCode(int);
		}
		return str;
	}

	bin2string(array){
		var result = "";
		for(var i = 0; i < array.length; ++i){
			result+= (String.fromCharCode(array[i]));
		}
		return result;
	}

}