import { Injectable } from '@angular/core';

import { Member } from './member';
import { Pool } from './pool';
import { Vote } from './vote';

declare var web3: any;

@Injectable()

export class contractintegration{
	accounts: any[];
	account: any;
	contractAbi: any;
	contractCompiled: any;
	contractGas: any;
	connected: any;
	initialized: any;
	lastBlockNumber: any;
	self: any;

	events: any;

	Obitcoin: any;

	constructor(){
		this.accounts = [];
		this.account = "";

		this.contractAbi = [{"constant":true,"inputs":[],"name":"getVotesLength","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"voteIndex","type":"uint16"}],"name":"getVote","outputs":[{"name":"","type":"uint8"},{"name":"","type":"uint16"},{"name":"","type":"uint16[]"},{"name":"","type":"int256[]"},{"name":"","type":"uint16"},{"name":"","type":"uint8"},{"name":"","type":"uint256"},{"name":"","type":"uint256"},{"name":"","type":"uint256"},{"name":"voted","type":"bool[]"},{"name":"poolMembers","type":"uint16[]"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"poolId","type":"uint16"}],"name":"getPool","outputs":[{"name":"","type":"bytes16[3]"},{"name":"","type":"uint16[]"},{"name":"","type":"uint16[]"},{"name":"","type":"uint128[3]"},{"name":"","type":"uint128[3][]"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"getContractAddress","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"getPublishingBlockNumber","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"member","type":"uint16"},{"name":"name","type":"bytes32"},{"name":"adr","type":"address"},{"name":"isAdmin","type":"bool"}],"name":"updateMember","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"getPools","outputs":[{"name":"","type":"uint16[]"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"pool","type":"uint16"},{"name":"toMembers","type":"uint16[]"},{"name":"amount","type":"int256[]"}],"name":"sendTokens","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"addMembers","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"getMembers","outputs":[{"name":"","type":"uint16[]"},{"name":"","type":"bytes32[]"},{"name":"","type":"address[]"},{"name":"","type":"uint8[]"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"poolId","type":"uint16"},{"name":"to","type":"uint16"}],"name":"delegateVote","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"pool","type":"uint16"},{"name":"name","type":"bytes16"},{"name":"legalContract","type":"bytes16"},{"name":"financialReports","type":"bytes16"}],"name":"updateDebtPool","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"voteIndex","type":"uint16"},{"name":"voteFor","type":"bool"}],"name":"vote","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"init","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"pool","type":"uint16"},{"name":"amount","type":"uint128"}],"name":"buyTokens","outputs":[],"payable":false,"type":"function"},{"inputs":[],"payable":false,"type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"uint16"},{"indexed":true,"name":"to","type":"uint16"},{"indexed":true,"name":"pool","type":"uint16"},{"indexed":false,"name":"amount","type":"int256"},{"indexed":false,"name":"time","type":"uint256"}],"name":"TokenTransfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"uint16"},{"indexed":true,"name":"to","type":"uint16"},{"indexed":true,"name":"pool","type":"uint16"},{"indexed":false,"name":"amount","type":"int256"},{"indexed":false,"name":"time","type":"uint256"}],"name":"MoneyTransfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"uint16"},{"indexed":true,"name":"to","type":"uint16"},{"indexed":true,"name":"pool","type":"uint16"},{"indexed":false,"name":"amount","type":"int256"},{"indexed":false,"name":"time","type":"uint256"}],"name":"SliceTransfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"uint16"},{"indexed":true,"name":"pool","type":"uint16"},{"indexed":false,"name":"amount","type":"uint128"},{"indexed":false,"name":"time","type":"uint256"}],"name":"TokenPurchase","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"uint16"},{"indexed":true,"name":"pool","type":"uint16"},{"indexed":false,"name":"added","type":"bool"},{"indexed":false,"name":"time","type":"uint256"}],"name":"PoolChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"uint16"},{"indexed":true,"name":"fromAddress","type":"address"},{"indexed":false,"name":"time","type":"uint256"}],"name":"UnauthorizedAccess","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"uint16"},{"indexed":true,"name":"to","type":"uint16"},{"indexed":false,"name":"added","type":"bool"},{"indexed":false,"name":"time","type":"uint256"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"uint16"},{"indexed":true,"name":"to","type":"uint16"},{"indexed":false,"name":"added","type":"bool"},{"indexed":false,"name":"time","type":"uint256"}],"name":"PersonChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"uint16"},{"indexed":true,"name":"voteIndex","type":"uint16"},{"indexed":false,"name":"pool","type":"uint16"},{"indexed":false,"name":"voteState","type":"uint8"},{"indexed":false,"name":"time","type":"uint256"}],"name":"VoteChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"uint16"},{"indexed":true,"name":"voteIndex","type":"uint16"},{"indexed":false,"name":"pool","type":"uint16"},{"indexed":false,"name":"vote","type":"bool"},{"indexed":false,"name":"time","type":"uint256"}],"name":"Voted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"uint16"},{"indexed":true,"name":"to","type":"uint16"},{"indexed":true,"name":"pool","type":"uint16"},{"indexed":false,"name":"time","type":"uint256"}],"name":"Delegation","type":"event"}];

		this.contractCompiled = '6060604052341561000c57fe5b5b60088054600160a060020a03191633600160a060020a031617905543600755600680546201000061ffff1990911660011763ffff000019161790555b5b614158806100596000396000f300606060405236156100bf5763ffffffff60e060020a600035041663267e652981146100c1578063279be9dd146100e35780632ce126691461029e57806332a2c5d01461042a578063438a5f131461045657806357091c8114610478578063673a2a1f146104a55780636ccd5bb0146105105780638e47cd231461059f5780639eab5253146105b1578063a132ecd21461070c578063cee11e961461072b578063d738d4b31461075d578063e1c7392a1461077b578063f3fa89df1461078d575bfe5b34156100c957fe5b6100d16107b2565b60408051918252519081900360200190f35b34156100eb57fe5b6100fa61ffff600435166107b9565b604051808c600281111561010a57fe5b60ff16815261ffff808d166020830152891660808201526040810190606081019060a00189600281111561013a57fe5b60ff168152602001888152602001878152602001868152602001806020018060200185810385528e8181518152602001915080519060200190602002808383600083146101a2575b8051825260208311156101a257601f199092019160209182019101610182565b50505090500185810384528d8181518152602001915080519060200190602002808383600083146101ee575b8051825260208311156101ee57601f1990920191602091820191016101ce565b50505091909101868103845288518152885160209182019250818a0191028083838215610236575b80518252602083111561023657601f199092019160209182019101610216565b505050919091018681038352875181528751602091820192508189019102808383821561027e575b80518252602083111561027e57601f19909201916020918201910161025e565b5050509050019f5050505050505050505050505050505060405180910390f35b34156102a657fe5b6102b561ffff60043516610b08565b604051808660608083835b8051825260208311156102e057601f1990920191602091820191016102c0565b50505091909101905060208101604082018560608083835b80518252602083111561031857601f1990920191602091820191016102f8565b50505090500180602001848103845288818151815260200191508051906020019060200280838360008314610368575b80518252602083111561036857601f199092019160209182019101610348565b50505091909101858103845288518152885160209182019250818a01910280838382156103b0575b8051825260208311156103b057601f199092019160209182019101610390565b5050509050018481038252858181518152602001915080516000925b818410156104135760208085028401015160608083835b80518252602083111561040357601f1990920191602091820191016103e3565b50505090500192600101926103cc565b925050509850505050505050505060405180910390f35b341561043257fe5b61043a610eb6565b60408051600160a060020a039092168252519081900360200190f35b341561045e57fe5b6100d1610ebb565b60408051918252519081900360200190f35b341561048057fe5b6104a361ffff60043516602435600160a060020a03604435166064351515610ec2565b005b34156104ad57fe5b6104b56112e4565b60408051602080825283518183015283519192839290830191858101910280838382156104fd575b8051825260208311156104fd57601f1990920191602091820191016104dd565b5050509050019250505060405180910390f35b341561051857fe5b6040805160248035600481810135602081810286810182019097528186526104a39661ffff84351696939560449501929182919085019084908082843750506040805187358901803560208181028481018201909552818452989a99890198929750908201955093508392508501908490808284375094965061136b95505050505050565b005b34156105a757fe5b6104a3611681565b005b34156105b957fe5b6105c16118ef565b604051808060200180602001806020018060200185810385528981815181526020019150805190602001906020028083836000831461061b575b80518252602083111561061b57601f1990920191602091820191016105fb565b50505091909101868103855289518152895160209182019250818b0191028083838215610663575b80518252602083111561066357601f199092019160209182019101610643565b50505091909101868103845288518152885160209182019250818a01910280838382156106ab575b8051825260208311156106ab57601f19909201916020918201910161068b565b50505091909101868103835287518152875160209182019250818901910280838382156106f3575b8051825260208311156106f357601f1990920191602091820191016106d3565b5050509050019850505050505050505060405180910390f35b341561071457fe5b6104a361ffff60043581169060243516611bdd565b005b341561073357fe5b6104a361ffff600435166001608060020a031960243581169060443581169060643516611f4e565b005b341561076557fe5b6104a361ffff600435166024351515612211565b005b341561078357fe5b6104a3612a51565b005b341561079557fe5b6104a361ffff600435166001608060020a0360243516612d6e565b005b6000545b90565b600060006107c5613cc0565b6107cd613cc0565b600060006000600060006107df613cc0565b6107e7613cc0565b6000600060008e61ffff168154811015156107fe57fe5b906000526020600020906008020160005b50600781015461ffff16600090815260036020526040908190205490519193509080591061083a5750595b908082528060200260200182016040525b509350600090505b600782015461ffff908116600090815260036020526040902054908216101561090857600782015461ffff90811660009081526003602052604081208054600686019385169081106108a157fe5b90600052602060002090601091828204019190066002025b905461ffff6101009290920a900481168252602082019290925260400160002054855160ff9091169186919084169081106108f057fe5b9115156020928302909101909101525b600101610853565b8160050160009054906101000a900460ff168260070160009054906101000a900461ffff1683600401846000018560070160029054906101000a900461ffff168660050160019054906101000a900460ff168760030154886001015489600201548c600360008d60070160009054906101000a900461ffff1661ffff1661ffff16815260200190815260200160002060000188805480602002602001604051908101604052809291908181526020018280548015610a0d57602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116109d45790505b5050505050985087805480602002602001604051908101604052809291908181526020018280548015610a5f57602002820191906000526020600020905b815481526020019060010190808311610a4b575b5050505050975080805480602002602001604051908101604052809291908181526020018280548015610ad957602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff1681526020019060020190602082600101049283019260010382029150808411610aa05790505b505050505090509c509c509c509c509c509c509c509c509c509c509c505b505091939597999b90929496989a50565b610b10613cf6565b610b18613cc0565b610b20613cc0565b610b28613cf6565b610b30613cc0565b6000610b3a613cf6565b610b42613cc0565b610b4a613cc0565b61ffff8a166000908152600360205260408120600581015490955060ff161515610b7357610000565b8454604051805910610b825750595b908082528060200260200182016040528015610bb857816020015b610ba5613cf6565b815260200190600190039081610b9d5790505b50855460405191945090805910610bcc5750595b908082528060200260200182016040525b5060058601549092506101009004608060020a028460005b6001608060020a031990921660209290920201526006850154608060020a028460015b6001608060020a031990921660209290920201526006850154608060020a90819004028460025b6001608060020a031990921660209290920201525060005b845461ffff82161015610db657846001016000866000018361ffff16815481101515610c7f57fe5b90600052602060002090601091828204019190066002025b905461ffff6101009290920a90041681526020810191909152604090810160002081516060810190925260038282826020028201916000905b82829054906101000a90046001608060020a03166001608060020a031681526020019060100190602082600f01049283019260010382029150808411610cd05790505b5050505050838261ffff16815181101515610d2a57fe5b6020908102909101015284546002860190600090879061ffff8516908110610d4e57fe5b90600052602060002090601091828204019190066002025b905461ffff6101009290920a9004811682526020820192909252604001600020548351908216918491908416908110610d9b57fe5b61ffff9092166020928302909101909101525b600101610c57565b838560000183876003018683805480602002602001604051908101604052809291908181526020018280548015610e3457602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff1681526020019060020190602082600101049283019260010382029150808411610dfb5790505b5050604080516060810191829052949850869350600392509050826000855b82829054906101000a90046001608060020a03166001608060020a031681526020019060100190602082600f01049283019260010382029150808411610e535790505b50505050509150995099509950995099505b505050505091939590929450565b305b90565b6007545b90565b60006003805b600160a060020a03331660009081526005602090815260408083205461ffff168352600191829052909120015460ff166003811115610f0357fe5b106112995761ffff861615801590610f38575061ffff861660009081526001602081905260409091200154610100900460ff16155b15610f4257610000565b61ffff861615801590610f7b575060035b61ffff87166000908152600160208190526040909120015460ff166003811115610f7957fe5b145b15610f8557610000565b600160a060020a03841660009081526005602052604090205461ffff878116911614801590610fcf5750600160a060020a03841660009081526005602052604090205461ffff1615155b15610fd957610000565b61ffff8616159150811561104d576006805461ffff198116600161ffff928316818101909316919091179092556002805491985091810161101a8382613d83565b91600052602060002090601091828204019190066002025b815461ffff808b166101009390930a92830292021916179055505b61ffff861660009081526001602081905260409091200154600160a060020a038581166201000090920416146110d05761ffff8616600081815260016020818152604080842090920154600160a060020a0362010000909104811684526005909152818320805461ffff1990811690915590881683529120805490911690911790555b82151560025b61ffff88166000908152600160208190526040909120015460ff1660038111156110fc57fe5b141461116457600160a060020a03331660009081526005602090815260409182902054825186151581524292810192909252825161ffff808b16949216927f955f9cd413b1613b572ff1877b25ae515763d2a51d926bd21ba78d8ec4f16c3c92908290030190a35b60408051608081019091528581526020810184611182576001611185565b60025b600381111561119057fe5b815260016020808301829052600160a060020a03881660409384015261ffff8a16600090815282825292909220835181559183015182820180549192909160ff1916908360038111156111df57fe5b021790555060408281015160019092018054606090940151600160a060020a03908116620100000275ffffffffffffffffffffffffffffffffffffffff0000199415156101000261ff001990961695909517939093169390931790925533166000908152600560209081529082902054825185151581524292810192909252825161ffff808b16949216927f7107c2ae9754688147920c7dbf25c81ed808624042d38439123c6da5fe34beb492908290030190a35b6112dc565b600160a060020a033316600081815260056020908152604091829020548251428152925161ffff9091169260008051602061410d83398151915292908290030190a35b505050505050565b6112ec613cc0565b600480548060200260200160405190810160405280929190818152602001828054801561136057602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116113275790505b505050505090505b90565b6000806003805b600160a060020a03331660009081526005602090815260408083205461ffff168352600191829052909120015460ff1660038111156113ad57fe5b1061129957845115806113bf57508351155b806113cc57508451845114155b156113d657610000565b61ffff861660009081526003602052604090206005015460ff1615156113fb57610000565b600092505b84518361ffff16101561148a57838361ffff1681518110151561141f57fe5b9060200190602002015160001480611474575060016000868561ffff1681518110151561144857fe5b602090810290910181015161ffff1682528101919091526040016000206001015460ff61010090910416155b1561147e57610000565b5b600190920191611400565b61ffff861660009081526003602052604090205415156114b4576114af868686613727565b611294565b60008054906114c69060018301613dbd565b506000805460001981019081106114d957fe5b906000526020600020906008020160005b5060058101805462ff00001916620100001780825591935060019160ff191682805b02179055506005820180546000919061ff001916610100835b021790555033600160a060020a031660009081526005602090815260409091205460078401805463ffff0000191661ffff909216620100000291909117905562093a8042016003840155855161158391600485019190880190613def565b5060078201805461ffff191661ffff881617905583516115a99083906020870190613e98565b506000546007830154600584015460405161ffff8084168083526000199095018116946201000090940416927f716894e2a949e79640a4695695c3c281859348dd862e6ecadede2911af42c67192909161010090910460ff169042906020810183600281111561161557fe5b60ff168152602001828152602001935050505060405180910390a35b6112dc565b600160a060020a033316600081815260056020908152604091829020548251428152925161ffff9091169260008051602061410d83398151915292908290030190a35b505050505050565b611689613cc0565b611691613cc0565b6006546116b29060009060d860020a64506573686f029061ffff1682610ec2565b6006546116d39060009060d860020a64506573686f029061ffff1682610ec2565b6006546116f49060009060d860020a64506573686f029061ffff1682610ec2565b6006546117159060009060d860020a64506573686f029061ffff1682610ec2565b6006546117369060009060d860020a64506573686f029061ffff1682610ec2565b60056040518059106117455750595b908082528060200260200182016040525b50600654815191935061ffff1660001901908390600090811061177557fe5b61ffff92831660209182029290920101526006548351911660011901908390600190811061179f57fe5b61ffff9283166020918202929092010152600654835191166002190190839060029081106117c957fe5b61ffff9283166020918202929092010152600654835191166003190190839060039081106117f357fe5b61ffff92831660209182029290920101526006548351911660041901908390600490811061181d57fe5b61ffff90921660209283029091019091015260405160059080591061183f5750595b908082528060200260200182016040525b509050600a81600081518110151561186457fe5b6020908102909101015280516014908290600190811061188057fe5b602090810290910101528051601e908290600290811061189c57fe5b602090810290910101528051602890829060039081106118b857fe5b602090810290910101528051603290829060049081106118d457fe5b602090810290910101526118ea6001838361136b565b5b5050565b6118f7613cc0565b6118ff613cc0565b611907613cc0565b61190f613cc0565b611917613cc0565b61191f613cc0565b611927613cc0565b6002546040516000919080591061193b5750595b908082528060200260200182016040525b50600254604051919550908059106119615750595b908082528060200260200182016040525b50600254604051919450908059106119875750595b908082528060200260200182016040525b509150600090505b60025461ffff82161015611b4b576001600060028361ffff168154811015156119c557fe5b90600052602060002090601091828204019190066002025b9054906101000a900461ffff1661ffff1661ffff16815260200190815260200160002060000154848261ffff16815181101515611a1657fe5b602090810290910101526002805460019160009161ffff8516908110611a3857fe5b90600052602060002090601091828204019190066002025b9054906101000a900461ffff1661ffff1661ffff16815260200190815260200160002060010160029054906101000a9004600160a060020a0316838261ffff16815181101515611a9c57fe5b600160a060020a039092166020928302909101909101526002805460019160009161ffff8516908110611acb57fe5b90600052602060002090601091828204019190066002025b905461ffff6101009290920a900481168252602082019290925260400160002060010154835160ff909116918491908416908110611b1d57fe5b906020019060200201906003811115611b3257fe5b90816003811115611b3f57fe5b9052505b6001016119a0565b600284848483805480602002602001604051908101604052809291908181526020018280548015611bc357602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff1681526020019060020190602082600101049283019260010382029150808411611b8a5790505b5050505050935097509750975097505b5050505090919293565b600080806001805b600160a060020a03331660009081526005602090815260408083205461ffff168352600191829052909120015460ff166003811115611c2057fe5b1061129957600160a060020a03331660009081526005602090815260408083205461ffff8a81168552600384528285208a821686526001818101909552929094209316965094505b600291828204019190066010025b90546001608060020a036101009290920a9004161515611c9557610000565b61ffff80861660009081526002850160205260409020541615611ce45761ffff80861660009081526002850160205260408082205487841683529120805461ffff191691909216179055611d0b565b61ffff84811660009081526002850160205260409020805461ffff19169187169190911790555b61ffff80851660008181526002860160205260409020549091161415611d3057610000565b61ffff84811660008181526002860160209081526040918290205482514281529251858c16959190911693927fb50b4345eab1d67368bd493e80604cd2e81aef9ac74449ce63192accb7dd1ede92908290030190a4600091505b600254821015611294578361ffff16836002016000600285815481101515611dae57fe5b90600052602060002090601091828204019190066002025b905461ffff6101009290920a900481168252602082019290925260400160002054161415611ef15761ffff808516600090815260028086016020819052604083205482549416939092919086908110611e1b57fe5b90600052602060002090601091828204019190066002025b90546101009190910a900461ffff908116825260208083019390935260409182016000908120805461ffff1916958316959095179094558781168452600287810190935292205481548984169391909116919085908110611e9057fe5b90600052602060002090601091828204019190066002025b9054906101000a900461ffff1661ffff167fb50b4345eab1d67368bd493e80604cd2e81aef9ac74449ce63192accb7dd1ede426040518082815260200191505060405180910390a45b5b600190910190611d8a565b5b6112dc565b600160a060020a033316600081815260056020908152604091829020548251428152925161ffff9091169260008051602061410d83398151915292908290030190a35b505050505050565b60006002805b600160a060020a03331660009081526005602090815260408083205461ffff168352600191829052909120015460ff166003811115611f8f57fe5b106112995761ffff861615801590611fbe575061ffff861660009081526003602052604090206005015460ff16155b15611fc857610000565b61ffff861615915081156120465760068054600161ffff6201000080840482168381019092160263ffff00001990931692909217909255600480549198509181016120138382613d83565b91600052602060002090601091828204019190066002025b815461ffff808b166101009390930a92830292021916179055505b84600360008861ffff1661ffff16815260200190815260200160002060050160016101000a8154816001608060020a030219169083608060020a9004021790555083600360008861ffff1661ffff16815260200190815260200160002060060160006101000a8154816001608060020a030219169083608060020a9004021790555082600360008861ffff1661ffff16815260200190815260200160002060060160106101000a8154816001608060020a030219169083608060020a900402179055506001600360008861ffff1661ffff16815260200190815260200160002060050160006101000a81548160ff0219169083151502179055508561ffff166005600033600160a060020a0316600160a060020a0316815260200190815260200160002060009054906101000a900461ffff1661ffff167f1f6540b99f70a62641d39a080ec69b8a1442f4a4019da09b6bb25ae3d7d7621c844260405180831515151581526020018281526020019250505060405180910390a35b6112dc565b600160a060020a033316600081815260056020908152604091829020548251428152925161ffff9091169260008051602061410d83398151915292908290030190a35b505050505050565b6000600060006000600060008761ffff1681548110151561222e57fe5b906000526020600020906008020160005b506007015461ffff1660005b61ffff8083166000908152600360205260409020549082161015612a0357600160a060020a03331660009081526005602090815260408083205461ffff868116855260039093529220805492821692909184169081106122a757fe5b90600052602060002090601091828204019190066002025b9054906101000a900461ffff1661ffff1614156129fa576000805461ffff8b169081106122e857fe5b906000526020600020906008020160005b50600781015461ffff9081166000908152600360209081526040808320600160a060020a033316845260058352818420549094168084526006860190925290912054929950909750955060ff168061236a575060005b6005880154610100900460ff16600281111561236757fe5b14155b1561237457610000565b61ffff808616600090815260028801602052604090205416158015906123b2575061ffff808616600081815260028901602052604090205490911614155b156123bc57610000565b61ffff851660009081526006880160209081526040808320805460ff1916600190811790915589019091528120905b600291828204019190066010025b9054600160a060020a0333166000908152600560209081526040918290205460078c0154835161ffff91821681528e151593810193909352428385015292516001608060020a036101009690960a909404949094169750818d1693909116917f935e1ae8eb2b516cef31e554545cf80875084a5190ed424c1bc748ab1de20c989181900360600190a3600092505b85548310156126f6578461ffff1686600201600088600001868154811015156124ac57fe5b90600052602060002090601091828204019190066002025b905461ffff6101009290920a9004811682526020820192909252604001600020541614801561252e5750855461ffff86169087908590811061250257fe5b90600052602060002090601091828204019190066002025b9054906101000a900461ffff1661ffff1614155b156126ea57866006016000876000018581548110151561254a57fe5b90600052602060002090601091828204019190066002025b905461ffff6101009290920a900416815260208101919091526040016000205460ff161561258f576126ea565b85600101600087600001858154811015156125a657fe5b90600052602060002090601091828204019190066002025b905461ffff6101009290920a900416815260208101919091526040016000908120905b600291828204019190066010025b9054906101000a90046001608060020a0316840193506001876006016000886000018681548110151561261e57fe5b90600052602060002090601091828204019190066002025b90546101009190910a900461ffff90811682526020820192909252604001600020805460ff1916921515929092179091558654908a169087908590811061267957fe5b90600052602060002090601091828204019190066002025b905460078a01546040805161ffff92831681528d15156020820152428183015290516101009490940a90920416917f935e1ae8eb2b516cef31e554545cf80875084a5190ed424c1bc748ab1de20c989181900360600190a35b5b600190920191612487565b87156128f6576001870180546001608060020a03861601905560026003870160005b600291828204019190066010025b9054906101000a90046001608060020a03166001608060020a031681151561274a57fe5b046001016001608060020a031687600101541015156128f1576005870180546001919061ff001916610100835b021790555060015b600588015460ff16600281111561279257fe5b1415612872576007870154600488018054604080516020808402820181019092528281526128729461ffff16939092909183018282801561281a57602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116127e15790505b50508c546040805160208084028201810190925282815294508e935090915083018282801561286857602002820191906000526020600020905b815481526020019060010190808311612854575b5050505050613727565b5b6007870154600588015460405161ffff8084168083528d821694620100009004909116927f716894e2a949e79640a4695695c3c281859348dd862e6ecadede2911af42c6719261010090910460ff16904290602081018360028111156128d557fe5b60ff168152602001828152602001935050505060405180910390a35b6129f3565b600280880180546001608060020a0387160190556003870160005b600291828204019190066010025b9054906101000a90046001608060020a03166001608060020a031681151561294357fe5b046001016001608060020a031687600201541015156129f3576005870180546002919061ff001916610100835b02179055506007870154600588015460405161ffff8084168083528d821694620100009004909116927f716894e2a949e79640a4695695c3c281859348dd862e6ecadede2911af42c6719261010090910460ff16904290602081018360028111156129d757fe5b60ff168152602001828152602001935050505060405180910390a35b5b5b612a46565b5b60010161224b565b600160a060020a033316600081815260056020908152604091829020548251428152925161ffff9091169260008051602061410d83398151915292908290030190a35b505050505050505050565b612a59613cc0565b612a61613cc0565b60085433600160a060020a039081169116141580612ab25750600854600160a060020a031660009081526005602090815260408083205461ffff1683526001918290529091200154610100900460ff165b15612abc57610000565b600854600160a060020a031660009081526005602090815260408083205461ffff1683526001918290529091208101805460039260ff1990911690835b0217905550600854612b3a906000907f436f6f7264696e61746f7200000000000000000000000000000000000000000090600160a060020a03166001610ec2565b600854600160a060020a031660009081526005602090815260408083205461ffff1683526001918290529091208101805460039260ff1990911690835b0217905550612ba9600060d860020a64506573686f02732e9cf98a103148172b4e773f0ed2c58269a3fbd66000610ec2565b612beb60007f47656f726769000000000000000000000000000000000000000000000000000073a0323703351bc5e4905a5080d0f1e3fc4e57220f6000610ec2565b612c5860007f5361766520706573686f000000000000000000000000000000000000000000007f61797900000000000000000000000000000000000000000000000000000000007f6c6d616f00000000000000000000000000000000000000000000000000000000611f4e565b6003604051805910612c675750595b908082528060200260200182016040525b5091506001826000815181101515612c8c57fe5b61ffff909216602092830290910190910152815160029083906001908110612cb057fe5b61ffff909216602092830290910190910152815160039083906002908110612cd457fe5b61ffff909216602092830290910190910152604051600390805910612cf65750595b908082528060200260200182016040525b509050600a816000815181101515612d1b57fe5b60209081029091010152805160149082906001908110612d3757fe5b602090810290910101528051601e90829060029081106118d457fe5b602090810290910101526118ea6001838361136b565b5b5050565b6000612d78613cf6565b600060006000600060006000612d8c613cc0565b612d94613cc0565b60006002805b600160a060020a03331660009081526005602090815260408083205461ffff168352600191829052909120015460ff166003811115612dd557fe5b106136d45761ffff8e1660009081526003602052604090209b506001608060020a038d161580612e0a575060058c015460ff16155b80612e1457508b54155b15612e1e57610000565b6040805160608101918290529060038e810191826000855b82829054906101000a90046001608060020a03166001608060020a031681526020019060100190602082600f01049283019260010382029150808411612e365790505b50939e5060009d508d9c508e935060019250612e93915050565b60200201516001608060020a03161515612eac57610000565b61ffff8e1660009081526003602052604090819020549051805910612ece5750595b908082528060200260200182016040525b5061ffff8f166000908152600360205260409081902054905191955090805910612f065750595b908082528060200260200182016040525b50925060008b815b60200201516001608060020a03161191505b896001608060020a03168d6001608060020a0316111561361757898d039450600098505b8b5489101561360e578b548c908a908110612f6c57fe5b90600052602060002090601091828204019190066002025b9054906101000a900461ffff16975081612fd65761ffff881660009081526001808e016020526040909120905b600291828204019190066010025b9054906101000a90046001608060020a031661300e565b61ffff8816600090815260018d0160205260408120905b600291828204019190066010025b9054906101000a90046001608060020a03165b965081613023578a60015b602002015161304b565b60038c0160005b600291828204019190066010025b9054906101000a90046001608060020a03165b6001608060020a03168588026001608060020a031681151561306957fe5b8d54919004965060001901891480156130a657508115806130a657508a60005b60200201516001608060020a03168a8e036001608060020a031611155b5b156130b257898d0395505b82898151811015156130c057fe5b9060200190602002015160001480156130f0575083898151811015156130e257fe5b906020019060200201516000145b156131ab5761ffff8816600090815260018d0160205260408120905b600291828204019190066010025b9054906101000a90046001608060020a03166001608060020a0316838a81518110151561314357fe5b602090810290910181019190915261ffff8916600090815260018e019091526040902060025b600291828204019190066010025b9054906101000a90046001608060020a03166001608060020a0316848a8151811015156131a057fe5b602090810290910101525b6001608060020a03861615156131c057613602565b811561322257866001608060020a0316866001608060020a031611156131e4578695505b858b60005b6020020180516001608060020a039290038216905283519087169084908b90811061321057fe5b60209081029091010180519190910390525b98850198858b60025b6020020180516001608060020a0392018216905284519087169085908b90811061325157fe5b6020908102909101018051909101905281158061328a57508a60005b60200201516001608060020a03168a8e036001608060020a031611155b156135ea5761ffff8816600090815260018d0160205260408120905b600291828204019190066010025b9054906101000a90046001608060020a03166001608060020a0316838a8151811015156132dd57fe5b60209081029091010151146133da578d61ffff168861ffff166005600033600160a060020a0316600160a060020a0316815260200190815260200160002060009054906101000a900461ffff1661ffff167ff3eb50aadbf0d7c57ec5f56ac9bc98188c5eaf05702012ebfe3698cf182ccb4b8f60010160008d61ffff1661ffff168152602001908152602001600020600060038110151561337a57fe5b600291828204019190066010025b9054906101000a90046001608060020a03166001608060020a0316878e8151811015156133b157fe5b906020019060200201510342604051808381526020018281526020019250505060405180910390a45b61ffff8816600090815260018d016020526040902060025b600291828204019190066010025b9054906101000a90046001608060020a03166001608060020a0316848a81518110151561342957fe5b6020908102909101015114613526578d61ffff168861ffff166005600033600160a060020a0316600160a060020a0316815260200190815260200160002060009054906101000a900461ffff1661ffff167fe4f2b86532105d40a9022bf88549ecc09bc51efffbcf2dfd6f399ed48de8558a8f60010160008d61ffff1661ffff16815260200190815260200160002060026003811015156134c657fe5b600291828204019190066010025b9054906101000a90046001608060020a03166001608060020a0316888e8151811015156134fd57fe5b906020019060200201510342604051808381526020018281526020019250505060405180910390a45b828981518110151561353457fe5b602090810290910181015161ffff8a16600090815260018f019092526040822090915b600291828204019190066010025b6101000a8154816001608060020a0302191690836001608060020a03160217905550838981518110151561359557fe5b602090810290910181015161ffff8a16600090815260018f01909252604090912060025b600291828204019190066010025b6101000a8154816001608060020a0302191690836001608060020a031602179055505b6001608060020a03808e16908b16106136025761360e565b5b600190980197612f55565b60009150612f31565b6136276003808e01908d90613f1a565b506001608060020a038a8116908e161461364057610000565b8d61ffff166005600033600160a060020a0316600160a060020a0316815260200190815260200160002060009054906101000a900461ffff1661ffff167f56b23e5cb3910a046f9a66c3017ae49b4def7ebae1fb08b4adf446b4fd4c47f18c4260405180836001608060020a03166001608060020a031681526020018281526020019250505060405180910390a35b613717565b600160a060020a033316600081815260056020908152604091829020548251428152925161ffff9091169260008051602061410d83398151915292908290030190a35b5050505050505050505050505050565b60006000600060008551855114151561373f57610000565b5060005b85518161ffff161015613cb657858161ffff1681518110151561376257fe5b602090810290910181015161ffff808a16600090815260038452604080822083851683526001019094529290922087519196509350869183169081106137a457fe5b6020908102909101015192508160005b600291828204019190066010025b90546001608060020a036101009290920a900416838360005b600291828204019190066010025b9054906101000a90046001608060020a03166001608060020a031601121561381057610000565b8160015b600291828204019190066010025b90546001608060020a036101009290920a900416838360015b600291828204019190066010025b9054906101000a90046001608060020a03166001608060020a031601121561387057610000565b8160005b600291828204019190066010025b9054906101000a90046001608060020a03166001608060020a03168360000313156138ac57610000565b8160005b600291828204019190066010025b90546001608060020a036101009290920a90041615801561390257508160015b600291828204019190066010025b90546001608060020a036101009290920a900416155b1561395d5761ffff8716600090815260036020526040902080546001810161392a8382613d83565b91600052602060002090601091828204019190066002025b815461ffff8089166101009390930a92830292021916179055505b6000831315613a9f57828260005b600291828204019190066010025b81546001608060020a036101009290920a8082048316909401821684029190930219909216919091179055828260015b600291828204019190066010025b81546001608060020a036101009290920a808204831690940182168402919093021990921691909117905561ffff87166000908152600360208190526040822085929101905b600291828204019190066010025b81546001608060020a036101009290920a808204831690940182168402919093021990921691909117905561ffff8716600090815260036020819052604090912084910160015b600291828204019190066010025b8282829054906101000a90046001608060020a03160192506101000a8154816001608060020a0302191690836001608060020a03160217905550613be3565b60008381039083905b600291828204019190066010025b81546001608060020a036101009290920a80820483169490940382168402919093021990921691909117905560008390038260015b600291828204019190066010025b81546001608060020a036101009290920a80820483169490940382168402919093021990921691909117905561ffff871660009081526003602081905260408220858303929101905b600291828204019190066010025b81546001608060020a036101009290920a80820483169490940382168402919093021990921691909117905561ffff87166000908152600360208190526040822091859003910160015b600291828204019190066010025b8282829054906101000a90046001608060020a03160392506101000a8154816001608060020a0302191690836001608060020a031602179055505b33600160a060020a03166000908152600560209081526040918290205482518681524292810192909252825161ffff8b8116948982169491909316927ff3eb50aadbf0d7c57ec5f56ac9bc98188c5eaf05702012ebfe3698cf182ccb4b92918290030190a433600160a060020a03166000908152600560209081526040918290205482518681524292810192909252825161ffff8b8116948982169491909316927fb9391ec3dd39929885998b0c7d6e055589bf5c1fddbd79099da743a20b82252492918290030190a45b600101613743565b5b50505050505050565b60408051602081019091526000815290565b60408051602081019091526000815290565b60408051602081019091526000815290565b6060604051908101604052806003905b600081526000199091019060200181613d065790505090565b6060604051908101604052806003905b600081526000199091019060200181613d065790505090565b60408051602081019091526000815290565b6060604051908101604052806003905b600081526000199091019060200181613d065790505090565b815481835581811511613db757600f016010900481600f01601090048360005260206000209182019101613db79190613fbf565b5b505050565b815481835581811511613db757600802816008028360005260206000209182019101613db79190613fe0565b5b505050565b82805482825590600052602060002090600f01601090048101928215613e885791602002820160005b83821115613e5857835183826101000a81548161ffff021916908361ffff1602179055509260200192600201602081600101049283019260010302613e18565b8015613e865782816101000a81549061ffff0219169055600201602081600101049283019260010302613e58565b505b50613e9492915061404f565b5090565b828054828255906000526020600020908101928215613ed3579160200282015b82811115613ed3578251825591602001919060010190613eb8565b5b50613e94929150613fbf565b5090565b60408051602081019091526000815290565b60408051602081019091526000815290565b60408051602081019091526000815290565b600283019183908215613faf5791602002820160005b83821115613f7a57835183826101000a8154816001608060020a0302191690836001608060020a031602179055509260200192601001602081600f01049283019260010302613f30565b8015613fad5782816101000a8154906001608060020a030219169055601001602081600f01049283019260010302613f7a565b505b50613e94929150614096565b5090565b6107b691905b80821115613e945760008155600101613fc5565b5090565b90565b6107b691905b80821115613e94576000613ffa82826140c1565b60018201600090556002820160009055600382016000905560048201600061402291906140e3565b5060058101805462ffffff1916905560078101805463ffffffff19169055600801613fe6565b5090565b90565b6107b691905b80821115613e9457805461ffff19168155600101614055565b5090565b90565b6107b691905b80821115613e945760008155600101613fc5565b5090565b90565b6107b691905b80821115613e945780546001608060020a031916815560010161409c565b5090565b90565b50805460008255906000526020600020908101906140df9190613fbf565b5b50565b50805460008255600f0160109004906000526020600020908101906140df9190613fbf565b5b50560008a520c83f3f94e52d4d4b14319f76c4924f0b58aa571d1d8956acc5849651eaa165627a7a72305820aef560f4038de221268ba3dc4b2783c65636b47c094b6d018856fd1082c64d2f0029';

		this.contractGas = '4700000';

		this.connected = false;
		this.initialized = false;
		this.lastBlockNumber = 0;

		this.self = this;
	}

	isWeb3Available(){
		if(typeof web3 == "undefined") return false;
		return true;
	}

	init(callback){
		var self = this;

		web3.eth.getAccounts(function(err, accs) {
			if (err != null) {
				callback("There was an error fetching your accounts.");
				return;
			}

			if (accs.length == 0) {
				callback("Couldn't get any accounts! Make sure Metamask is configured correctly.");
				return;
			}
		
			self.accounts = accs;
			self.account = self.accounts[0];

			console.log("Extracted accounts: ",self.accounts);
			
			callback();
		});
	}

	deployNewContract(callback) {
		var self = this;

		var obitcoinContract = web3.eth.contract(this.contractAbi);
		this.Obitcoin = obitcoinContract.new(
		{
			from: web3.eth.accounts[0], 
			data: this.contractCompiled, 
			gas: this.contractGas
		}, function (e, contract){
			if(e) callback(e, undefined);
			else if (typeof contract.address !== 'undefined') {
				console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);
				console.log(contract);

				self.connected = true;

				callback(e, contract.address);
			}
		});
	}

	initContract(callback: Function) {
	if(!this.isConnected()) return;

		var self = this;

		var trigger = self.Obitcoin.PersonChanged();
		trigger.watch(function(err, event) {
			if (err) {
				console.log(err)
				return;
			}
			trigger.stopWatching();
			callback();
		});

		this.Obitcoin.init({from: this.account}, function(error, result){
			if(!error){
				console.log("Transaction hash: "+ result);
			} else console.error(error);
		});
	}

	connectToContract(address, callback) {

		var obitcoinContract = web3.eth.contract(this.contractAbi);
		
		this.Obitcoin = obitcoinContract.at(address);
		
		var self = this;

		try {
			this.Obitcoin.getContractAddress.call({from: this.account}, function(error, result){
				if(!error){
					if(result==address){
						console.log("Connection successful");
						self.connected = true;
						callback();
					} else {
						callback("Invalid address!");
					}
				}
				else{
					console.error(error);
					callback("There was an error. Reload the page and try again");
				}
			});
		} catch (err){
			callback(err.message);
		}
	}

	disconnect(){
		this.Obitcoin = undefined;
		this.connected = false;
		if(this.events != undefined){
			this.events.stopWatching();
			this.events = undefined;
		}
	}

	isConnected(){
		return this.connected;
	}

	getAccount(){
		return this.account;
	}

	getPools(callback){
		if(!this.isConnected()) return;

		this.Obitcoin.getPools.call({from: this.account}, function(error, result){
			if(!error){
				var data = [];
				result.forEach(res => data.push(res.valueOf()));
				callback(data);
			}
			else
				console.error(error);
		});
	}

	getPool(pool: number, callback: Function){
		if(!this.isConnected()) return;

		var self = this;

		this.Obitcoin.getPool.call(pool, {from: this.account}, function(error, result){
			if(!error){
				if(result[1].length != result[4].length || result[2].length != result[4].length) console.error("Received corrupt data on getPool("+pool+")");

				let data : string[] = [];
				let members : number[] = [];
				result[0].forEach(item => data.push(self.hex2a(item)));
				result[1].forEach(res => members.push(res.valueOf()));
				
				let tokens : number[] = [];
				let slices : number[] = [];
				let money : number[] = [];
				let totalBalance: number[] = [];
				let delegations: Map<number, number> = new Map<number, number>();

				for(var i = 0; i<result[4].length; i++){
					tokens[i] = Number(result[4][i][0].valueOf());
					slices[i] = Number(result[4][i][1].valueOf());
					money[i] = Number(result[4][i][2].valueOf());
				}

				for(var i = 0; i<result[2].length; i++){
					delegations[members[i]] = Number(result[2][i].valueOf());
				}

				for(var i = 0; i<result[3].length; i++) totalBalance.push(Number(result[3][i].valueOf()));

				callback(data, members, tokens, slices, money, totalBalance, delegations);
			}
			else console.error(error);
		});
	}

	getMembers(callback: Function){
		if(!this.isConnected()) return;
		var self = this;

		this.Obitcoin.getMembers.call({from: this.account}, function(error, result){
			if(!error){
				let memberIds : number[] = [];
				let names : string[] = [];
				let addresses : string[] = [];
				let permLevels : number[] = [];

				result[0].forEach(res => memberIds.push(res.valueOf()));
				result[1].forEach(res => names.push(self.hex2a(res)));
				addresses = result[2];
				result[3].forEach(res => permLevels.push(res.valueOf()));

				callback(memberIds, names, addresses, permLevels);
			}
			else
				console.error(error);
		});
	}

	getVotesLength(callback: Function){
		if(!this.isConnected()) return;
		var self = this;

		this.Obitcoin.getVotesLength.call({from: this.account}, function(error, result){
			if(!error){
				callback(result.valueOf());
			} else console.error(error);
		});
	}

	getVote(voteIndex: number, callback: Function){
		if(!this.isConnected()) return;
		var self = this;

		this.Obitcoin.getVote.call(voteIndex, {from: this.account}, function(error, result){
			if(!error){
				let vote : Vote = new Vote();
				vote.voteType = Number(result[0].valueOf());
				vote.pool = Number(result[1].valueOf());
				vote.arg1 = [];
				result[2].forEach(res => vote.arg1.push(Number(res.valueOf())));
				vote.arg2 = [];
				result[3].forEach(res => vote.arg2.push(Number(res.valueOf())));
				vote.startedBy = Number(result[4].valueOf());
				vote.voteState = Number(result[5].valueOf());
				vote.endTime = Number(result[6].valueOf());
				vote.votedFor = Number(result[7].valueOf());
				vote.votedAgainst = Number(result[8].valueOf());
				vote.voted = new Map<number, boolean>();
				vote.id = Number(voteIndex);

				for(var i = 0; i<result[9].length; i++){
					vote.voted[result[10][i].valueOf()] = result[9][i].valueOf();
				}

				callback(vote);
			} else console.error(error);
		});
	}

	getWholeVotes(callback: Function){
		var votes : Vote[] = [];
		var self = this;

		this.getVotesLength(function(length: number){
			if(length == 0) callback(votes);

			for(var i = 0; i<length; i++){
				self.getVote(i, function(vote: Vote){
					votes.push(vote);
					if(votes.length == length) callback(votes);
				});
			}
		});
	}


	getWholeMembers(callback: Function){
		var members :Member[] = [];
		var self = this;
		this.getMembers(function(memberIds : number[], memberNames : string[], memberAddresses : string[], permLevels : number[]){
			if(memberIds.length==0) callback(members);

			for(var i = 0; i<memberIds.length; i++){
				let member : Member = new Member();

				member.id = memberIds[i];
				member.name = memberNames[i];
				member.address = memberAddresses[i];
				member.permissionLevel = permLevels[i];

				members.push(member);
			}

			callback(members);
		});
	}

	getWholePools(callback: Function){
		var pools: Pool[] = [];
		var self = this;
		this.getPools(function(data: number[]){
			if(data.length==0) callback(pools);

			for(var i = 0; i<data.length; i++){
				self.getWholePool(data[i], function(pool: Pool){
					pools.push(pool);

					if(pools.length == data.length){
						callback(pools);
					}
				});

			}
		});
	}

	getWholePool(id: number, callback: Function){
		var self = this;

		var pool = new Pool();
		pool.id = Number(id);

		pool.tokens = new Map<number, number>();
		pool.slices = new Map<number, number>();
		pool.money = new Map<number, number>();

		this.getPool(id, function(data: string[], members: number[], tokens: number[], slices: number[], money: number[], totalBalance: number[], delegations: Map<number, number>){
			pool.name = data[0];
			pool.legalContract = data[1];
			pool.financialReports = data[2];

			pool.delegations = delegations;

			pool.members = members;

			for(var i = 0; i<members.length; i++){
				pool.tokens[members[i]] = tokens[i];
				pool.slices[members[i]] = slices[i];
				pool.money[members[i]] = money[i];
			}

			pool.totalTokens = totalBalance[0];
			pool.totalSlices = totalBalance[1];
			pool.totalMoney = totalBalance[2];

			callback(pool);		
		});
	}

	addMember(name, address, isAdmin, callback){
		if(!this.isConnected()) return;

		this.Obitcoin.updateMember(0, name, address, isAdmin, {from: this.account}, function(error, result){
			if(!error){
				callback(result);
			}
			else
				console.error(error);
		});
	}

	createDebtPool(name, legalContract, financialReports, callback) {
		if(!this.isConnected()) return;

		this.Obitcoin.updateDebtPool(0, name, legalContract, financialReports, {from: this.account}, function(error, result){
			if(!error)
				callback(result);
			else
				console.error(error);
		});
	}

	updateMember(member: number, name: string, address: string, isAdmin: boolean, callback: Function){
		if(!this.isConnected()) return;

		this.Obitcoin.updateMember(member, name, address, isAdmin, {from: this.account}, function(error, result){
			if(!error){
				callback(result);
			}
			else
				console.error(error);
		});
	}

	updatePool(pool, name, legalContract, financialReports, callback){
		if(!this.isConnected()) return;

		this.Obitcoin.updateDebtPool(pool, name, legalContract, financialReports, {from: this.account}, function(error, result){
			if(!error){
				callback(result);
			}
			else
				console.error(error);
		});
	}

	delegateVote(pool: number, to: number, callback: Function){
		if(!this.isConnected()) return;

		this.Obitcoin.delegateVote(pool, to, {from: this.account}, function(error, result){
			if(!error){
				callback(result);
			} else console.log(error);
		});
	}

	vote(voteIndex: number, voteFor: boolean, callback: Function){
		if(!this.isConnected()) return;

		this.Obitcoin.vote(voteIndex, voteFor, {from: this.account}, function(error, result){
			if(!error){
				callback(result);
			} else console.error(error);
		});
	}

	sendTokens(pool: number, members: number[], amount: number[], callback: Function){
		if(!this.isConnected()) return;

		this.Obitcoin.sendTokens(pool, members, amount, {from: this.account}, function(error, result){
			if(!error)
				callback(result)
			else
				console.error(error);
		});
	}

	buyTokens(pool, amount, callback){
		if(!this.isConnected()) return;

		this.Obitcoin.buyTokens(pool, amount, {from: this.account}, function(error, result){
			if(!error)
				callback(result)
			else
				console.error(error);
		});
	}

	getLastBlockNumber(){
		return this.lastBlockNumber;
	}

	startListeningForEvents(callback){
		if(!this.isConnected()) return;

		var self = this;

		this.lastBlockNumber = web3.eth.getBlockNumber(function(err, result){
			if(err) return;
			self.lastBlockNumber = result;

			self.Obitcoin.getPublishingBlockNumber.call({from: self.account}, function(error, result){

				self.events = self.Obitcoin.allEvents({fromBlock: result.valueOf()});
				self.events.watch(function(err, event) {
					if (err) {
						console.log(err)
						return;
					}
					callback(event);
				});

			});
		});
	}

	hex2a(hexx) { //convert a byte array to string
		var hex = hexx.toString(); //force conversion
		var str = '';
		var int;
		for (var i = 2; i < hex.length; i += 2){
			int = parseInt(hex.substr(i, 2), 16);
			if(int==0) continue;
			str += String.fromCharCode(int);
		}
		return str;
	}
}