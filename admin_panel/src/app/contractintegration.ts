import { Injectable } from '@angular/core';

import { Member } from './member';
import { Pool } from './pool';
import { Vote } from './vote';

declare var web3: any;

@Injectable()

export class contractintegration{
	accounts: any[];
	account: any;
	contractAbi: any;
	contractCompiled: any;
	contractGas: any;
	connected: any;
	initialized: any;
	lastBlockNumber: any;
	self: any;

	events: any;

	Obitcoin: any;

	constructor(){
		this.accounts = [];
		this.account = "";

		this.contractAbi = [{"constant":true,"inputs":[],"name":"getVotesLength","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"voteIndex","type":"uint16"}],"name":"getVote","outputs":[{"name":"","type":"uint8"},{"name":"","type":"uint16"},{"name":"","type":"uint16[]"},{"name":"","type":"int256[]"},{"name":"","type":"uint16"},{"name":"","type":"uint8"},{"name":"","type":"uint256"},{"name":"","type":"uint256"},{"name":"","type":"uint256"},{"name":"voted","type":"bool[]"},{"name":"poolMembers","type":"uint16[]"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"pool","type":"uint16"}],"name":"getPool","outputs":[{"name":"","type":"bytes16[3]"},{"name":"","type":"uint16[]"},{"name":"","type":"uint128[3][]"},{"name":"","type":"uint128[3]"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"getContractAddress","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"getPublishingBlockNumber","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"member","type":"uint16"},{"name":"name","type":"bytes32"},{"name":"adr","type":"address"},{"name":"isAdmin","type":"bool"}],"name":"updateMember","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"getPools","outputs":[{"name":"","type":"uint16[]"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"pool","type":"uint16"},{"name":"toMembers","type":"uint16[]"},{"name":"amount","type":"int256[]"}],"name":"sendTokens","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"addMembers","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"getMembers","outputs":[{"name":"","type":"uint16[]"},{"name":"","type":"bytes32[]"},{"name":"","type":"address[]"},{"name":"","type":"uint8[]"},{"name":"","type":"uint16[]"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"to","type":"uint16"}],"name":"delegateVote","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"pool","type":"uint16"},{"name":"name","type":"bytes16"},{"name":"legalContract","type":"bytes16"},{"name":"financialReports","type":"bytes16"}],"name":"updateDebtPool","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"voteIndex","type":"uint16"},{"name":"voteFor","type":"bool"}],"name":"vote","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"init","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"pool","type":"uint16"},{"name":"amount","type":"uint128"}],"name":"buyTokens","outputs":[],"payable":false,"type":"function"},{"inputs":[],"payable":false,"type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"uint16"},{"indexed":true,"name":"to","type":"uint16"},{"indexed":true,"name":"pool","type":"uint16"},{"indexed":false,"name":"amount","type":"int256"},{"indexed":false,"name":"time","type":"uint256"}],"name":"TokenTransfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"uint16"},{"indexed":true,"name":"to","type":"uint16"},{"indexed":true,"name":"pool","type":"uint16"},{"indexed":false,"name":"amount","type":"uint128"},{"indexed":false,"name":"time","type":"uint256"}],"name":"MoneyTransfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"uint16"},{"indexed":true,"name":"to","type":"uint16"},{"indexed":true,"name":"pool","type":"uint16"},{"indexed":false,"name":"amount","type":"int256"},{"indexed":false,"name":"time","type":"uint256"}],"name":"SliceTransfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"uint16"},{"indexed":true,"name":"pool","type":"uint16"},{"indexed":false,"name":"amount","type":"uint128"},{"indexed":false,"name":"time","type":"uint256"}],"name":"TokenPurchase","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"uint16"},{"indexed":true,"name":"pool","type":"uint16"},{"indexed":false,"name":"added","type":"bool"},{"indexed":false,"name":"time","type":"uint256"}],"name":"PoolChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"uint16"},{"indexed":true,"name":"fromAddress","type":"address"},{"indexed":false,"name":"time","type":"uint256"}],"name":"UnauthorizedAccess","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"uint16"},{"indexed":true,"name":"to","type":"uint16"},{"indexed":false,"name":"added","type":"bool"},{"indexed":false,"name":"time","type":"uint256"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"uint16"},{"indexed":true,"name":"to","type":"uint16"},{"indexed":false,"name":"added","type":"bool"},{"indexed":false,"name":"time","type":"uint256"}],"name":"PersonChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"uint16"},{"indexed":true,"name":"voteIndex","type":"uint16"},{"indexed":false,"name":"pool","type":"uint16"},{"indexed":false,"name":"voteState","type":"uint8"},{"indexed":false,"name":"time","type":"uint256"}],"name":"VoteChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"uint16"},{"indexed":true,"name":"voteIndex","type":"uint16"},{"indexed":false,"name":"pool","type":"uint16"},{"indexed":false,"name":"vote","type":"bool"},{"indexed":false,"name":"time","type":"uint256"}],"name":"Voted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"uint16"},{"indexed":true,"name":"to","type":"uint16"},{"indexed":false,"name":"time","type":"uint256"}],"name":"Delegation","type":"event"}];

		this.contractCompiled = '6060604052341561000c57fe5b5b60098054600160a060020a03191633600160a060020a031617905543600855600780546201000061ffff1990911660011763ffff000019161790555b5b613f24806100596000396000f300606060405236156100bf5763ffffffff60e060020a600035041663267e652981146100c1578063279be9dd146100e35780632ce126691461029e57806332a2c5d0146103d8578063438a5f131461040457806357091c8114610426578063673a2a1f146104535780636ccd5bb0146104be5780638e47cd231461054d5780639eab52531461055f578063cddcf3f214610708578063cee11e9614610721578063d738d4b314610753578063e1c7392a14610771578063f3fa89df14610783575bfe5b34156100c957fe5b6100d16107a8565b60408051918252519081900360200190f35b34156100eb57fe5b6100fa61ffff600435166107af565b604051808c600281111561010a57fe5b60ff16815261ffff808d166020830152891660808201526040810190606081019060a00189600281111561013a57fe5b60ff168152602001888152602001878152602001868152602001806020018060200185810385528e8181518152602001915080519060200190602002808383600083146101a2575b8051825260208311156101a257601f199092019160209182019101610182565b50505090500185810384528d8181518152602001915080519060200190602002808383600083146101ee575b8051825260208311156101ee57601f1990920191602091820191016101ce565b50505091909101868103845288518152885160209182019250818a0191028083838215610236575b80518252602083111561023657601f199092019160209182019101610216565b505050919091018681038352875181528751602091820192508189019102808383821561027e575b80518252602083111561027e57601f19909201916020918201910161025e565b5050509050019f5050505050505050505050505050505060405180910390f35b34156102a657fe5b6102b561ffff60043516610afe565b604051808560608083835b8051825260208311156102e057601f1990920191602091820191016102c0565b50505091909101905060208101604082018460608083835b80518252602083111561031857601f1990920191602091820191016102f8565b5050509190910184810384528751815287516020918201925081890191028083838215610360575b80518252602083111561036057601f199092019160209182019101610340565b5050509050018381038252858181518152602001915080516000925b818410156103c35760208085028401015160608083835b8051825260208311156103b357601f199092019160209182019101610393565b505050905001926001019261037c565b92505050965050505050505060405180910390f35b34156103e057fe5b6103e8610e6d565b60408051600160a060020a039092168252519081900360200190f35b341561040c57fe5b6100d1610e72565b60408051918252519081900360200190f35b341561042e57fe5b61045161ffff60043516602435600160a060020a03604435166064351515610e79565b005b341561045b57fe5b610463611299565b60408051602080825283518183015283519192839290830191858101910280838382156104ab575b8051825260208311156104ab57601f19909201916020918201910161048b565b5050509050019250505060405180910390f35b34156104c657fe5b6040805160248035600481810135602081810286810182019097528186526104519661ffff84351696939560449501929182919085019084908082843750506040805187358901803560208181028481018201909552818452989a99890198929750908201955093508392508501908490808284375094965061132095505050505050565b005b341561055557fe5b61045161160b565b005b341561056757fe5b61056f611879565b60405180806020018060200180602001806020018060200186810386528b8181518152602001915080519060200190602002808383600083146105cd575b8051825260208311156105cd57601f1990920191602091820191016105ad565b5050509190910187810386528b5181528b5160209182019250818d0191028083838215610615575b80518252602083111561061557601f1990920191602091820191016105f5565b5050509190910187810385528a5181528a5160209182019250818c019102808383821561065d575b80518252602083111561065d57601f19909201916020918201910161063d565b50505091909101878103845289518152895160209182019250818b01910280838382156106a5575b8051825260208311156106a557601f199092019160209182019101610685565b50505091909101878103835288518152885160209182019250818a01910280838382156106ed575b8051825260208311156106ed57601f1990920191602091820191016106cd565b5050509050019a505050505050505050505060405180910390f35b341561071057fe5b61045161ffff60043516611c19565b005b341561072957fe5b61045161ffff600435166001608060020a031960243581169060443581169060643516611f1e565b005b341561075b57fe5b61045161ffff60043516602435151561213a565b005b341561077957fe5b610451612971565b005b341561078b57fe5b61045161ffff600435166001608060020a0360243516612c90565b005b6000545b90565b600060006107bb613a8c565b6107c3613a8c565b600060006000600060006107d5613a8c565b6107dd613a8c565b6000600060008e61ffff168154811015156107f457fe5b906000526020600020906008020160005b50600781015461ffff1660009081526004602052604090819020549051919350908059106108305750595b908082528060200260200182016040525b509350600090505b600782015461ffff90811660009081526004602052604090205490821610156108fe57600782015461ffff908116600090815260046020526040812080546006860193851690811061089757fe5b90600052602060002090601091828204019190066002025b905461ffff6101009290920a900481168252602082019290925260400160002054855160ff9091169186919084169081106108e657fe5b9115156020928302909101909101525b600101610849565b8160050160009054906101000a900460ff168260070160009054906101000a900461ffff1683600401846000018560070160029054906101000a900461ffff168660050160019054906101000a900460ff168760030154886001015489600201548c600460008d60070160009054906101000a900461ffff1661ffff1661ffff16815260200190815260200160002060000188805480602002602001604051908101604052809291908181526020018280548015610a0357602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116109ca5790505b5050505050985087805480602002602001604051908101604052809291908181526020018280548015610a5557602002820191906000526020600020905b815481526020019060010190808311610a41575b5050505050975080805480602002602001604051908101604052809291908181526020018280548015610acf57602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff1681526020019060020190602082600101049283019260010382029150808411610a965790505b505050505090509c509c509c509c509c509c509c509c509c509c509c505b505091939597999b90929496989a50565b610b06613ac2565b610b0e613a8c565b610b16613a8c565b610b1e613ac2565b610b26613ac2565b610b2e613a8c565b61ffff871660009081526004602081905260408220015460ff161515610b5357610000565b61ffff881660009081526004602052604090819020549051805910610b755750595b908082528060200260200182016040528015610bab57816020015b610b98613ac2565b815260200190600190039081610b905790505b5061ffff8916600090815260046020819052604082200154919350610100909104608060020a029084905b6001608060020a03199092166020928302919091015261ffff8916600090815260049091526040902060050154608060020a028360015b6001608060020a03199092166020928302919091015261ffff8916600090815260049091526040902060050154608060020a90819004028360025b6001608060020a031990921660209290920201525060005b61ffff8089166000908152600460205260409020549082161015610d625761ffff8089166000908152600460205260408120805460018201938516908110610ca457fe5b90600052602060002090601091828204019190066002025b905461ffff6101009290920a90041681526020810191909152604090810160002081516060810190925260038282826020028201916000905b82829054906101000a90046001608060020a03166001608060020a031681526020019060100190602082600f01049283019260010382029150808411610cf55790505b5050505050828261ffff16815181101515610d4f57fe5b602090810290910101525b600101610c60565b61ffff8816600090815260046020908152604091829020805483518184028101840190945280845286939192869260028501929091859190830182828015610df157602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff1681526020019060020190602082600101049283019260010382029150808411610db85790505b5050604080516060810191829052949750859350600392509050826000855b82829054906101000a90046001608060020a03166001608060020a031681526020019060100190602082600f01049283019260010382029150808411610e105790505b5050505050905096509650965096505b5050509193509193565b305b90565b6008545b90565b60006003805b600160a060020a03331660009081526006602090815260408083205461ffff168352600290915290206001015460ff166003811115610eba57fe5b1061124e5761ffff861615801590610eee575061ffff8616600090815260026020526040902060010154610100900460ff16155b15610ef857610000565b61ffff861615801590610f30575060035b61ffff871660009081526002602052604090206001015460ff166003811115610f2e57fe5b145b15610f3a57610000565b600160a060020a03841660009081526006602052604090205461ffff878116911614801590610f845750600160a060020a03841660009081526006602052604090205461ffff1615155b15610f8e57610000565b61ffff86161591508115611002576007805461ffff198116600161ffff9283168181019093169190911790925560038054919850918101610fcf8382613b4f565b91600052602060002090601091828204019190066002025b815461ffff808b166101009390930a92830292021916179055505b61ffff8616600090815260026020526040902060010154600160a060020a038581166201000090920416146110855761ffff8616600081815260026020908152604080832060010154600160a060020a0362010000909104811684526006909252808320805461ffff199081169091559188168352909120805490911690911790555b82151560025b61ffff881660009081526002602052604090206001015460ff1660038111156110b057fe5b141461111857600160a060020a03331660009081526006602090815260409182902054825186151581524292810192909252825161ffff808b16949216927f955f9cd413b1613b572ff1877b25ae515763d2a51d926bd21ba78d8ec4f16c3c92908290030190a35b60408051608081019091528581526020810184611136576001611139565b60025b600381111561114457fe5b815260016020808301829052600160a060020a03881660409384015261ffff8a1660009081526002825292909220835181559183015182820180549192909160ff19169083600381111561119457fe5b021790555060408281015160019092018054606090940151600160a060020a03908116620100000275ffffffffffffffffffffffffffffffffffffffff0000199415156101000261ff001990961695909517939093169390931790925533166000908152600660209081529082902054825185151581524292810192909252825161ffff808b16949216927f7107c2ae9754688147920c7dbf25c81ed808624042d38439123c6da5fe34beb492908290030190a35b611291565b600160a060020a033316600081815260066020908152604091829020548251428152925161ffff90911692600080516020613ed983398151915292908290030190a35b505050505050565b6112a1613a8c565b600580548060200260200160405190810160405280929190818152602001828054801561131557602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116112dc5790505b505050505090505b90565b6000806003805b600160a060020a03331660009081526006602090815260408083205461ffff168352600290915290206001015460ff16600381111561136257fe5b1061124e578451158061137457508351155b8061138157508451845114155b1561138b57610000565b61ffff86166000908152600460208190526040909120015460ff1615156113b157610000565b600092505b84518361ffff16101561144057838361ffff168151811015156113d557fe5b906020019060200201516000148061142a575060026000868561ffff168151811015156113fe57fe5b602090810290910181015161ffff1682528101919091526040016000206001015460ff61010090910416155b1561143457610000565b5b6001909201916113b6565b61144b8686866134f2565b611249565b5060008054600019810190811061146357fe5b906000526020600020906008020160005b5060058101805462ff00001916620100001780825591935060019160ff191682805b02179055506005820180546000919061ff001916610100835b021790555033600160a060020a031660009081526006602090815260409091205460078401805463ffff0000191661ffff909216620100000291909117905562093a8042016003840155855161150d91600485019190880190613bbb565b5060078201805461ffff191661ffff881617905583516115339083906020870190613c64565b506000546007830154600584015460405161ffff8084168083526000199095018116946201000090940416927f716894e2a949e79640a4695695c3c281859348dd862e6ecadede2911af42c67192909161010090910460ff169042906020810183600281111561159f57fe5b60ff168152602001828152602001935050505060405180910390a35b611291565b600160a060020a033316600081815260066020908152604091829020548251428152925161ffff90911692600080516020613ed983398151915292908290030190a35b505050505050565b611613613a8c565b61161b613a8c565b60075461163c9060009060d860020a64506573686f029061ffff1682610e79565b60075461165d9060009060d860020a64506573686f029061ffff1682610e79565b60075461167e9060009060d860020a64506573686f029061ffff1682610e79565b60075461169f9060009060d860020a64506573686f029061ffff1682610e79565b6007546116c09060009060d860020a64506573686f029061ffff1682610e79565b60056040518059106116cf5750595b908082528060200260200182016040525b50600754815191935061ffff166000190190839060009081106116ff57fe5b61ffff92831660209182029290920101526007548351911660011901908390600190811061172957fe5b61ffff92831660209182029290920101526007548351911660021901908390600290811061175357fe5b61ffff92831660209182029290920101526007548351911660031901908390600390811061177d57fe5b61ffff9283166020918202929092010152600754835191166004190190839060049081106117a757fe5b61ffff9092166020928302909101909101526040516005908059106117c95750595b908082528060200260200182016040525b509050600a8160008151811015156117ee57fe5b6020908102909101015280516014908290600190811061180a57fe5b602090810290910101528051601e908290600290811061182657fe5b6020908102909101015280516028908290600390811061184257fe5b6020908102909101015280516032908290600490811061185e57fe5b6020908102909101015261187460018383611320565b5b5050565b611881613a8c565b611889613a8c565b611891613a8c565b611899613a8c565b6118a1613a8c565b6118a9613a8c565b6118b1613a8c565b6118b9613a8c565b6118c1613a8c565b600354604051600091908059106118d55750595b908082528060200260200182016040525b50600354604051919650908059106118fb5750595b908082528060200260200182016040525b50600354604051919550908059106119215750595b908082528060200260200182016040525b50600354604051919450908059106119475750595b908082528060200260200182016040525b509150600090505b60035461ffff82161015611b82576002600060038361ffff1681548110151561198557fe5b90600052602060002090601091828204019190066002025b9054906101000a900461ffff1661ffff1661ffff16815260200190815260200160002060000154858261ffff168151811015156119d657fe5b602090810290910101526003805460029160009161ffff85169081106119f857fe5b90600052602060002090601091828204019190066002025b9054906101000a900461ffff1661ffff1661ffff16815260200190815260200160002060010160029054906101000a9004600160a060020a0316848261ffff16815181101515611a5c57fe5b600160a060020a039092166020928302909101909101526003805460029160009161ffff8516908110611a8b57fe5b90600052602060002090601091828204019190066002025b905461ffff6101009290920a900481168252602082019290925260400160002060010154845160ff909116918591908416908110611add57fe5b906020019060200201906003811115611af257fe5b90816003811115611aff57fe5b815250506001600060038361ffff16815481101515611b1a57fe5b90600052602060002090601091828204019190066002025b905461ffff6101009290920a9004811682526020820192909252604001600020548351908216918491908416908110611b6757fe5b61ffff9092166020928302909101909101525b600101611960565b60038585858584805480602002602001604051908101604052809291908181526020018280548015611bfb57602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff1681526020019060020190602082600101049283019260010382029150808411611bc25790505b50505050509450995099509950995099505b50505050509091929394565b6000806001805b600160a060020a03331660009081526006602090815260408083205461ffff168352600290915290206001015460ff166003811115611c5b57fe5b10611ed557600160a060020a03331660009081526006602090815260408083205461ffff8881168552600190935292205491811694501615611cc75761ffff8085166000908152600160205260408082205486841683529120805461ffff191691909216179055611cec565b61ffff8381166000908152600160205260409020805461ffff19169186169190911790555b61ffff8084166000818152600160205260409020549091161415611d0f57610000565b61ffff80841660008181526001602090815260409182902054825142815292519416937fc382e5570138bb87167aab679b40be8824dfa2578aec7293eab918dd2a3f217d9281900390910190a3600091505b600354821015611ecf578261ffff1660016000600385815481101515611d8357fe5b90600052602060002090601091828204019190066002025b905461ffff6101009290920a900481168252602082019290925260400160002054161415611ec35761ffff80841660009081526001602081905260408220546003805491909416939192919086908110611df157fe5b90600052602060002090601091828204019190066002025b90546101009190910a900461ffff908116825260208083019390935260409182016000908120805461ffff19169583169590951790945586811684526001909252909120546003805491909216919084908110611e6257fe5b90600052602060002090601091828204019190066002025b9054906101000a900461ffff1661ffff167fc382e5570138bb87167aab679b40be8824dfa2578aec7293eab918dd2a3f217d426040518082815260200191505060405180910390a35b5b600190910190611d61565b5b611f18565b600160a060020a033316600081815260066020908152604091829020548251428152925161ffff90911692600080516020613ed983398151915292908290030190a35b50505050565b60006002805b600160a060020a03331660009081526006602090815260408083205461ffff168352600290915290206001015460ff166003811115611f5f57fe5b1061124e5761ffff861615801590611f8f575061ffff86166000908152600460208190526040909120015460ff16155b15611f9957610000565b61ffff861615915081156120175760078054600161ffff6201000080840482168381019092160263ffff0000199093169290921790925560058054919850918101611fe48382613b4f565b91600052602060002090601091828204019190066002025b815461ffff808b166101009390930a92830292021916179055505b61ffff8087166000818152600460208181526040808420928301805460059094018054608060020a808d048102818f046001608060020a0319909316929092176001608060020a03169190911790915560ff19908d046101000270ffffffffffffffffffffffffffffffff00199095169490941793909316600117909255600160a060020a03331683526006815291819020548151871515815242938101939093528151939416927f1f6540b99f70a62641d39a080ec69b8a1442f4a4019da09b6bb25ae3d7d7621c9281900390910190a35b611291565b600160a060020a033316600081815260066020908152604091829020548251428152925161ffff90911692600080516020613ed983398151915292908290030190a35b505050505050565b6000600060006000600060008761ffff1681548110151561215757fe5b906000526020600020906008020160005b506007015461ffff1660005b61ffff808316600090815260046020526040902054908216101561292357600160a060020a03331660009081526006602090815260408083205461ffff868116855260049093529220805492821692909184169081106121d057fe5b90600052602060002090601091828204019190066002025b9054906101000a900461ffff1661ffff16141561291a576000805461ffff8b1690811061221157fe5b906000526020600020906008020160005b50600781015461ffff9081166000908152600460209081526040808320600160a060020a0333168452600680845282852054909516808552948601909252909120549299509750955060ff1680612292575060005b6005880154610100900460ff16600281111561228f57fe5b14155b1561229c57610000565b61ffff80861660009081526001602052604090205416158015906122d6575061ffff80861660008181526001602052604090205490911614155b156122e057610000565b61ffff851660009081526006880160209081526040808320805460ff1916600190811790915589019091528120905b600291828204019190066010025b9054600160a060020a0333166000908152600660209081526040918290205460078c0154835161ffff91821681528e151593810193909352428385015292516001608060020a036101009690960a909404949094169750818d1693909116917f935e1ae8eb2b516cef31e554545cf80875084a5190ed424c1bc748ab1de20c989181900360600190a3600092505b8554831015612618578461ffff166001600088600001868154811015156123ce57fe5b90600052602060002090601091828204019190066002025b905461ffff6101009290920a900481168252602082019290925260400160002054161480156124505750855461ffff86169087908590811061242457fe5b90600052602060002090601091828204019190066002025b9054906101000a900461ffff1661ffff1614155b1561260c57866006016000876000018581548110151561246c57fe5b90600052602060002090601091828204019190066002025b905461ffff6101009290920a900416815260208101919091526040016000205460ff16156124b15761260c565b85600101600087600001858154811015156124c857fe5b90600052602060002090601091828204019190066002025b905461ffff6101009290920a900416815260208101919091526040016000908120905b600291828204019190066010025b9054906101000a90046001608060020a0316840193506001876006016000886000018681548110151561254057fe5b90600052602060002090601091828204019190066002025b90546101009190910a900461ffff90811682526020820192909252604001600020805460ff1916921515929092179091558654908a169087908590811061259b57fe5b90600052602060002090601091828204019190066002025b905460078a01546040805161ffff92831681528d15156020820152428183015290516101009490940a90920416917f935e1ae8eb2b516cef31e554545cf80875084a5190ed424c1bc748ab1de20c989181900360600190a35b5b6001909201916123ab565b8715612817576001870180546001608060020a038616019055600286810160005b600291828204019190066010025b9054906101000a90046001608060020a03166001608060020a031681151561266b57fe5b046001016001608060020a03168760010154101515612812576005870180546001919061ff001916610100835b021790555060015b600588015460ff1660028111156126b357fe5b1415612793576007870154600488018054604080516020808402820181019092528281526127939461ffff16939092909183018282801561273b57602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116127025790505b50508c546040805160208084028201810190925282815294508e935090915083018282801561278957602002820191906000526020600020905b815481526020019060010190808311612775575b50505050506134f2565b5b6007870154600588015460405161ffff8084168083528d821694620100009004909116927f716894e2a949e79640a4695695c3c281859348dd862e6ecadede2911af42c6719261010090910460ff16904290602081018360028111156127f657fe5b60ff168152602001828152602001935050505060405180910390a35b612913565b600280880180546001608060020a03871601905586810160005b600291828204019190066010025b9054906101000a90046001608060020a03166001608060020a031681151561286357fe5b046001016001608060020a03168760020154101515612913576005870180546002919061ff001916610100835b02179055506007870154600588015460405161ffff8084168083528d821694620100009004909116927f716894e2a949e79640a4695695c3c281859348dd862e6ecadede2911af42c6719261010090910460ff16904290602081018360028111156128f757fe5b60ff168152602001828152602001935050505060405180910390a35b5b5b612966565b5b600101612174565b600160a060020a033316600081815260066020908152604091829020548251428152925161ffff90911692600080516020613ed983398151915292908290030190a35b505050505050505050565b612979613a8c565b612981613a8c565b60095433600160a060020a0390811691161415806129d25750600954600160a060020a031660009081526006602090815260408083205461ffff1683526002909152902060010154610100900460ff165b156129dc57610000565b600954600160a060020a031660009081526006602090815260408083205461ffff168352600290915290206001908101805460039260ff1990911690835b0217905550600954612a5b906000907f436f6f7264696e61746f7200000000000000000000000000000000000000000090600160a060020a03166001610e79565b600954600160a060020a031660009081526006602090815260408083205461ffff168352600290915290206001908101805460039260ff1990911690835b0217905550612acb600060d860020a64506573686f02732e9cf98a103148172b4e773f0ed2c58269a3fbd66000610e79565b612b0d60007f47656f726769000000000000000000000000000000000000000000000000000073a0323703351bc5e4905a5080d0f1e3fc4e57220f6000610e79565b612b7a60007f5361766520706573686f000000000000000000000000000000000000000000007f61797900000000000000000000000000000000000000000000000000000000007f6c6d616f00000000000000000000000000000000000000000000000000000000611f1e565b6003604051805910612b895750595b908082528060200260200182016040525b5091506001826000815181101515612bae57fe5b61ffff909216602092830290910190910152815160029083906001908110612bd257fe5b61ffff909216602092830290910190910152815160039083906002908110612bf657fe5b61ffff909216602092830290910190910152604051600390805910612c185750595b908082528060200260200182016040525b509050600a816000815181101515612c3d57fe5b60209081029091010152805160149082906001908110612c5957fe5b602090810290910101528051601e908290600290811061185e57fe5b6020908102909101015261187460018383611320565b5b5050565b6000612c9a613ac2565b600060006000600060006000612cae613a8c565b612cb6613a8c565b6002805b600160a060020a03331660009081526006602090815260408083205461ffff168352600290915290206001015460ff166003811115612cf557fe5b106134a05761ffff8d1660009081526004602052604090209a506001608060020a038c161580612d2a575060048b015460ff16155b80612d3457508a54155b15612d3e57610000565b6040805160608101918290529060028d0190600390826000855b82829054906101000a90046001608060020a03166001608060020a031681526020019060100190602082600f01049283019260010382029150808411612d585790505b50939d5060009c508c9b508d935060019250612db5915050565b60200201516001608060020a03161515612dce57610000565b61ffff8d1660009081526004602052604090819020549051805910612df05750595b908082528060200260200182016040525b5061ffff8e166000908152600460205260409081902054905191945090805910612e285750595b908082528060200260200182016040525b5091505b886001608060020a03168c6001608060020a031611156132c757888c039350600097505b8a548810156132c2578a548b9089908110612e7857fe5b90600052602060002090601091828204019190066002025b905461ffff6101009290920a900416965060008a815b60200201516001608060020a031611612ef75761ffff871660009081526001808d016020526040909120905b600291828204019190066010025b9054906101000a90046001608060020a0316612f2f565b61ffff8716600090815260018c0160205260408120905b600291828204019190066010025b9054906101000a90046001608060020a03165b955060008a815b60200201516001608060020a031611612f57578960015b6020020151612f7f565b60028b0160005b600291828204019190066010025b9054906101000a90046001608060020a03165b6001608060020a03168487026001608060020a0316811515612f9d57fe5b0494506001608060020a0385161515612fd0576000866001608060020a03161115612fcb5760019450612fd0565b6132b6565b5b8188815181101515612fdf57fe5b906020019060200201516000141561304d5761ffff8716600090815260018c0160205260408120905b600291828204019190066010025b9054906101000a90046001608060020a03166001016001608060020a0316828981518110151561304257fe5b602090810290910101525b828881518110151561305b57fe5b90602001906020020151600014156130ca5761ffff8716600090815260018c016020526040902060025b600291828204019190066010025b9054906101000a90046001608060020a03166001016001608060020a031683898151811015156130bf57fe5b602090810290910101525b60008a815b60200201516001608060020a031611156131cc57856001608060020a0316856001608060020a03161115613101578594505b8c61ffff168761ffff166006600033600160a060020a0316600160a060020a0316815260200190815260200160002060009054906101000a900461ffff1661ffff167ff3eb50aadbf0d7c57ec5f56ac9bc98188c5eaf05702012ebfe3698cf182ccb4b886001608060020a031660000342604051808381526020018281526020019250505060405180910390a4848a60005b6020020180516001608060020a039290038216905282519086169083908a9081106131ba57fe5b60209081029091010180519190910390525b8c61ffff168761ffff166006600033600160a060020a0316600160a060020a0316815260200190815260200160002060009054906101000a900461ffff1661ffff167fcca8dbd4ba5afe4571e9544660d61ec920fc8c397d1ccb89154e803057bde225884260405180836001608060020a03166001608060020a031681526020018281526020019250505060405180910390a497840197848a60025b6020020180516001608060020a0392018216905283519086169084908a90811061328e57fe5b602090810290910101805190910190526001608060020a03808d16908a16106132b6576132c2565b5b600190970196612e61565b612e3d565b6132d660028c018b6003613ce6565b50600097505b8a548810156133f4578a548b90899081106132f357fe5b90600052602060002090601091828204019190066002025b9054906101000a900461ffff1696506001828981518110151561332a57fe5b602090810290910181015161ffff8a16600090815260018f019092526040822092900391905b600291828204019190066010025b6101000a8154816001608060020a0302191690836001608060020a031602179055506001838981518110151561339057fe5b602090810290910181015161ffff8a16600090815260018f0190925260409091209190039060025b600291828204019190066010025b6101000a8154816001608060020a0302191690836001608060020a031602179055505b6001909701966132dc565b6001608060020a03898116908d161461340c57610000565b8c61ffff166006600033600160a060020a0316600160a060020a0316815260200190815260200160002060009054906101000a900461ffff1661ffff167f56b23e5cb3910a046f9a66c3017ae49b4def7ebae1fb08b4adf446b4fd4c47f18b4260405180836001608060020a03166001608060020a031681526020018281526020019250505060405180910390a35b6134e3565b600160a060020a033316600081815260066020908152604091829020548251428152925161ffff90911692600080516020613ed983398151915292908290030190a35b50505050505050505050505050565b60006000600060008551855114151561350a57610000565b5060005b85518161ffff161015613a8257858161ffff1681518110151561352d57fe5b602090810290910181015161ffff808a166000908152600484526040808220838516835260010190945292909220875191965093508691831690811061356f57fe5b6020908102909101015192508160005b600291828204019190066010025b90546001608060020a036101009290920a900416838360005b600291828204019190066010025b9054906101000a90046001608060020a03166001608060020a03160112156135db57610000565b8160015b600291828204019190066010025b90546001608060020a036101009290920a900416838360015b600291828204019190066010025b9054906101000a90046001608060020a03166001608060020a031601121561363b57610000565b8160005b600291828204019190066010025b9054906101000a90046001608060020a03166001608060020a031683600003131561367757610000565b8160005b600291828204019190066010025b90546001608060020a036101009290920a9004161580156136cd57508160015b600291828204019190066010025b90546001608060020a036101009290920a900416155b156137285761ffff871660009081526004602052604090208054600181016136f58382613b4f565b91600052602060002090601091828204019190066002025b815461ffff8089166101009390930a92830292021916179055505b600083131561386a57828260005b600291828204019190066010025b81546001608060020a036101009290920a8082048316909401821684029190930219909216919091179055828260015b600291828204019190066010025b81546001608060020a036101009290920a808204831690940182168402919093021990921691909117905561ffff8716600090815260046020526040812084916002909101905b600291828204019190066010025b81546001608060020a036101009290920a808204831690940182168402919093021990921691909117905561ffff87166000908152600460205260409020839060020160015b600291828204019190066010025b8282829054906101000a90046001608060020a03160192506101000a8154816001608060020a0302191690836001608060020a031602179055506139af565b60008381039083905b600291828204019190066010025b81546001608060020a036101009290920a80820483169490940382168402919093021990921691909117905560008390038260015b600291828204019190066010025b81546001608060020a036101009290920a80820483169490940382168402919093021990921691909117905561ffff87166000908152600460205260408120848203916002909101905b600291828204019190066010025b81546001608060020a036101009290920a80820483169490940382168402919093021990921691909117905561ffff87166000908152600460205260408120908490039060020160015b600291828204019190066010025b8282829054906101000a90046001608060020a03160392506101000a8154816001608060020a0302191690836001608060020a031602179055505b33600160a060020a03166000908152600660209081526040918290205482518681524292810192909252825161ffff8b8116948982169491909316927ff3eb50aadbf0d7c57ec5f56ac9bc98188c5eaf05702012ebfe3698cf182ccb4b92918290030190a433600160a060020a03166000908152600660209081526040918290205482518681524292810192909252825161ffff8b8116948982169491909316927fb9391ec3dd39929885998b0c7d6e055589bf5c1fddbd79099da743a20b82252492918290030190a45b60010161350e565b5b50505050505050565b60408051602081019091526000815290565b60408051602081019091526000815290565b60408051602081019091526000815290565b6060604051908101604052806003905b600081526000199091019060200181613ad25790505090565b60408051602081019091526000815290565b6060604051908101604052806003905b600081526000199091019060200181613ad25790505090565b6060604051908101604052806003905b600081526000199091019060200181613ad25790505090565b815481835581811511613b8357600f016010900481600f01601090048360005260206000209182019101613b839190613d8b565b5b505050565b815481835581811511613b8357600802816008028360005260206000209182019101613b839190613dac565b5b505050565b82805482825590600052602060002090600f01601090048101928215613c545791602002820160005b83821115613c2457835183826101000a81548161ffff021916908361ffff1602179055509260200192600201602081600101049283019260010302613be4565b8015613c525782816101000a81549061ffff0219169055600201602081600101049283019260010302613c24565b505b50613c60929150613e1b565b5090565b828054828255906000526020600020908101928215613c9f579160200282015b82811115613c9f578251825591602001919060010190613c84565b5b50613c60929150613d8b565b5090565b60408051602081019091526000815290565b60408051602081019091526000815290565b60408051602081019091526000815290565b600283019183908215613d7b5791602002820160005b83821115613d4657835183826101000a8154816001608060020a0302191690836001608060020a031602179055509260200192601001602081600f01049283019260010302613cfc565b8015613d795782816101000a8154906001608060020a030219169055601001602081600f01049283019260010302613d46565b505b50613c60929150613e62565b5090565b6107ac91905b80821115613c605760008155600101613d91565b5090565b90565b6107ac91905b80821115613c60576000613dc68282613e8d565b600182016000905560028201600090556003820160009055600482016000613dee9190613eaf565b5060058101805462ffffff1916905560078101805463ffffffff19169055600801613db2565b5090565b90565b6107ac91905b80821115613c6057805461ffff19168155600101613e21565b5090565b90565b6107ac91905b80821115613c605760008155600101613d91565b5090565b90565b6107ac91905b80821115613c605780546001608060020a0319168155600101613e68565b5090565b90565b5080546000825590600052602060002090810190613eab9190613d8b565b5b50565b50805460008255600f016010900490600052602060002090810190613eab9190613d8b565b5b50560008a520c83f3f94e52d4d4b14319f76c4924f0b58aa571d1d8956acc5849651eaa165627a7a72305820378f5a344f57596454d4da2b1fcc7a62a1efbd09cd04f54f1633dda0ac80c7880029';

		this.contractGas = '5000000';

		this.connected = false;
		this.initialized = false;
		this.lastBlockNumber = 0;

		this.self = this;
	}

	isWeb3Available(){
		if(typeof web3 == "undefined") return false;
		return true;
	}

	init(callback){
		var self = this;

		web3.eth.getAccounts(function(err, accs) {
			if (err != null) {
				callback("There was an error fetching your accounts.");
				return;
			}

			if (accs.length == 0) {
				callback("Couldn't get any accounts! Make sure Metamask is configured correctly.");
				return;
			}
		
			self.accounts = accs;
			self.account = self.accounts[0];

			console.log("Extracted accounts: ",self.accounts);
			
			callback();
		});
	}

	deployNewContract(callback) {
		var self = this;

		var obitcoinContract = web3.eth.contract(this.contractAbi);
		this.Obitcoin = obitcoinContract.new(
		{
			from: web3.eth.accounts[0], 
			data: this.contractCompiled, 
			gas: this.contractGas
		}, function (e, contract){
			if(e) callback(e, undefined);
			else if (typeof contract.address !== 'undefined') {
				console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);
				console.log(contract);

				self.connected = true;

				contract.init({from: self.account}, function(error, result){
					if(!error){
						callback(e, contract.address);
					}
					else
						console.error(error);
				});
			}
		});
	}

	connectToContract(address, callback) {

		var obitcoinContract = web3.eth.contract(this.contractAbi);
		
		this.Obitcoin = obitcoinContract.at(address);
		
		var self = this;

		try {
			this.Obitcoin.getContractAddress.call({from: this.account}, function(error, result){
				if(!error){
					if(result==address){
						console.log("Connection successful");
						self.connected = true;
						callback();
					} else {
						callback("Invalid address!");
					}
				}
				else{
					console.error(error);
					callback("There was an error. Reload the page and try again");
				}
			});
		} catch (err){
			callback(err.message);
		}
	}

	disconnect(){
		this.Obitcoin = undefined;
		this.connected = false;
		if(this.events != undefined){
			this.events.stopWatching();
			this.events = undefined;
		}
	}

	isConnected(){
		return this.connected;
	}

	getAccount(){
		return this.account;
	}

	getPools(callback){
		if(!this.isConnected()) return;

		this.Obitcoin.getPools.call({from: this.account}, function(error, result){
			if(!error){
				var data = [];
				result.forEach(res => data.push(res.valueOf()));
				callback(data);
			}
			else
				console.error(error);
		});
	}

	getPool(pool: number, callback: Function){
		if(!this.isConnected()) return;

		var self = this;

		this.Obitcoin.getPool.call(pool, {from: this.account}, function(error, result){
			if(!error){
				if(result[1].length != result[2].length || result[3].length != 3) console.error("Received corrupt data on getPool("+pool+")");

				console.log(result);

				let data : string[] = [];
				let members : number[] = [];
				result[0].forEach(item => data.push(self.hex2a(item)));
				result[1].forEach(res => members.push(res.valueOf()));
				
				let tokens : number[] = [];
				let slices : number[] = [];
				let money : number[] = [];
				let totalBalance: number[] = [];

				for(var i = 0; i<result[2].length; i++){
					tokens[i] = Number(result[2][i][0].valueOf());
					slices[i] = Number(result[2][i][1].valueOf());
					money[i] = Number(result[2][i][2].valueOf());
				}

				for(var i = 0; i<result[3].length; i++) totalBalance.push(Number(result[3][i].valueOf()));

				callback(data, members, tokens, slices, money, totalBalance);
			}
			else console.error(error);
		});
	}

	getMembers(callback: Function){
		if(!this.isConnected()) return;
		var self = this;

		this.Obitcoin.getMembers.call({from: this.account}, function(error, result){
			if(!error){
				let memberIds : number[] = [];
				let names : string[] = [];
				let addresses : string[] = [];
				let permLevels : number[] = [];
				let delegateTo : number[] = [];

				result[0].forEach(res => memberIds.push(res.valueOf()));
				result[1].forEach(res => names.push(self.hex2a(res)));
				addresses = result[2];
				result[3].forEach(res => permLevels.push(res.valueOf()));
				result[4].forEach(res => delegateTo.push(res.valueOf()));

				callback(memberIds, names, addresses, permLevels, delegateTo);
			}
			else
				console.error(error);
		});
	}

	getVotesLength(callback: Function){
		if(!this.isConnected()) return;
		var self = this;

		this.Obitcoin.getVotesLength.call({from: this.account}, function(error, result){
			if(!error){
				callback(result.valueOf());
			} else console.error(error);
		});
	}

	getVote(voteIndex: number, callback: Function){
		if(!this.isConnected()) return;
		var self = this;

		this.Obitcoin.getVote.call(voteIndex, {from: this.account}, function(error, result){
			if(!error){
				let vote : Vote = new Vote();
				vote.voteType = Number(result[0].valueOf());
				vote.pool = Number(result[1].valueOf());
				vote.arg1 = [];
				result[2].forEach(res => vote.arg1.push(Number(res.valueOf())));
				vote.arg2 = [];
				result[3].forEach(res => vote.arg2.push(Number(res.valueOf())));
				vote.startedBy = Number(result[4].valueOf());
				vote.voteState = Number(result[5].valueOf());
				vote.endTime = Number(result[6].valueOf());
				vote.votedFor = Number(result[7].valueOf());
				vote.votedAgainst = Number(result[8].valueOf());
				vote.voted = new Map<number, boolean>();
				vote.id = Number(voteIndex);

				for(var i = 0; i<result[9].length; i++){
					vote.voted[result[10][i].valueOf()] = result[9][i].valueOf();
				}

				callback(vote);
			} else console.error(error);
		});
	}

	getWholeVotes(callback: Function){
		var votes : Vote[] = [];
		var self = this;

		this.getVotesLength(function(length: number){
			if(length == 0) callback(votes);

			for(var i = 0; i<length; i++){
				self.getVote(i, function(vote: Vote){
					votes.push(vote);
					if(votes.length == length) callback(votes);
				});
			}
		});
	}


	getWholeMembers(callback: Function){
		var members :Member[] = [];
		var self = this;
		this.getMembers(function(memberIds : number[], memberNames : string[], memberAddresses : string[], permLevels : number[], delegateTo: number[]){
			if(memberIds.length==0) callback(members);

			for(var i = 0; i<memberIds.length; i++){
				let member : Member = new Member();

				member.id = memberIds[i];
				member.name = memberNames[i];
				member.address = memberAddresses[i];
				member.permissionLevel = permLevels[i];
				member.delegateTo = delegateTo[i];

				members.push(member);
			}

			callback(members);
		});
	}

	getWholePools(callback: Function){
		var pools: Pool[] = [];
		var self = this;
		this.getPools(function(data: number[]){
			if(data.length==0) callback(pools);

			for(var i = 0; i<data.length; i++){
				self.getWholePool(data[i], function(pool: Pool){
					pools.push(pool);

					if(pools.length == data.length){
						callback(pools);
					}
				});

			}
		});
	}

	getWholePool(id: number, callback: Function){
		var self = this;

		var pool = new Pool();
		pool.id = Number(id);

		pool.tokens = new Map<number, number>();
		pool.slices = new Map<number, number>();
		pool.money = new Map<number, number>();

		this.getPool(id, function(data: string[], members: number[], tokens: number[], slices: number[], money: number[], totalBalance: number[]){
			pool.name = data[0];
			pool.legalContract = data[1];
			pool.financialReports = data[2];

			pool.members = members;

			for(var i = 0; i<members.length; i++){
				pool.tokens[members[i]] = tokens[i];
				pool.slices[members[i]] = slices[i];
				pool.money[members[i]] = money[i];
			}

			pool.totalTokens = totalBalance[0];
			pool.totalSlices = totalBalance[1];
			pool.totalMoney = totalBalance[2];

			callback(pool);		
		});
	}

	addMember(name, address, isAdmin, callback){
		if(!this.isConnected()) return;

		this.Obitcoin.updateMember(0, name, address, isAdmin, {from: this.account}, function(error, result){
			if(!error){
				callback(result);
			}
			else
				console.error(error);
		});
	}

	createDebtPool(name, legalContract, financialReports, callback) {
		if(!this.isConnected()) return;

		this.Obitcoin.updateDebtPool(0, name, legalContract, financialReports, {from: this.account}, function(error, result){
			if(!error)
				callback(result);
			else
				console.error(error);
		});
	}

	updateMember(member: number, name: string, address: string, isAdmin: boolean, callback: Function){
		if(!this.isConnected()) return;

		this.Obitcoin.updateMember(member, name, address, isAdmin, {from: this.account}, function(error, result){
			if(!error){
				callback(result);
			}
			else
				console.error(error);
		});
	}

	updatePool(pool, name, legalContract, financialReports, callback){
		if(!this.isConnected()) return;

		this.Obitcoin.updateDebtPool(pool, name, legalContract, financialReports, {from: this.account}, function(error, result){
			if(!error){
				callback(result);
			}
			else
				console.error(error);
		});
	}

	delegateVote(to: number, callback: Function){
		if(!this.isConnected()) return;

		this.Obitcoin.delegateVote(to, {from: this.account}, function(error, result){
			if(!error){
				callback(result);
			} else console.log(error);
		});
	}

	vote(voteIndex: number, voteFor: boolean, callback: Function){
		if(!this.isConnected()) return;

		this.Obitcoin.vote(voteIndex, voteFor, {from: this.account}, function(error, result){
			if(!error){
				callback(result);
			} else console.error(error);
		});
	}

	sendTokens(pool: number, members: number[], amount: number[], callback: Function){
		if(!this.isConnected()) return;

		this.Obitcoin.sendTokens(pool, members, amount, {from: this.account}, function(error, result){
			if(!error)
				callback(result)
			else
				console.error(error);
		});
	}

	buyTokens(pool, amount, callback){
		if(!this.isConnected()) return;

		this.Obitcoin.buyTokens(pool, amount, {from: this.account}, function(error, result){
			if(!error)
				callback(result)
			else
				console.error(error);
		});
	}

	getLastBlockNumber(){
		return this.lastBlockNumber;
	}

	startListeningForEvents(callback){
		if(!this.isConnected()) return;

		var self = this;

		this.lastBlockNumber = web3.eth.getBlockNumber(function(err, result){
			if(err) return;
			self.lastBlockNumber = result;

			self.Obitcoin.getPublishingBlockNumber.call({from: self.account}, function(error, result){

				self.events = self.Obitcoin.allEvents({fromBlock: result.valueOf()});
				self.events.watch(function(err, event) {
					if (err) {
						console.log(err)
						return;
					}
					callback(event);
				});

			});
		});
	}

	hex2a(hexx) { //convert a byte array to string
		var hex = hexx.toString(); //force conversion
		var str = '';
		var int;
		for (var i = 2; i < hex.length; i += 2){
			int = parseInt(hex.substr(i, 2), 16);
			if(int==0) continue;
			str += String.fromCharCode(int);
		}
		return str;
	}
}